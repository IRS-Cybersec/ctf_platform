[{"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\index.js":"1","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\serviceWorker.js":"2","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\App.js":"3","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\home.js":"4","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challenges.js":"5","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\Scoreboard.js":"6","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\profile.js":"7","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\admin.js":"8","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\announcements.js":"9","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\oops.js":"10","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\login.js":"11","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\userChallengeCreate.js":"12","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesCategory.js":"13","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSort.js":"14","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminUsers.js":"15","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminSubmissions.js":"16","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallenges.js":"17","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeCreate.js":"18","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeEdit.js":"19"},{"size":616,"mtime":1607510796935,"results":"20","hashOfConfig":"21"},{"size":5227,"mtime":1607510796968,"results":"22","hashOfConfig":"21"},{"size":15317,"mtime":1609167696025,"results":"23","hashOfConfig":"21"},{"size":3700,"mtime":1608974696298,"results":"24","hashOfConfig":"21"},{"size":13199,"mtime":1608977335060,"results":"25","hashOfConfig":"21"},{"size":13081,"mtime":1609168102087,"results":"26","hashOfConfig":"21"},{"size":19437,"mtime":1609153279798,"results":"27","hashOfConfig":"21"},{"size":1919,"mtime":1609167696008,"results":"28","hashOfConfig":"21"},{"size":799,"mtime":1608974696298,"results":"29","hashOfConfig":"21"},{"size":877,"mtime":1607510796969,"results":"30","hashOfConfig":"21"},{"size":12405,"mtime":1609167487183,"results":"31","hashOfConfig":"21"},{"size":21620,"mtime":1608980398291,"results":"32","hashOfConfig":"21"},{"size":20276,"mtime":1608974355704,"results":"33","hashOfConfig":"21"},{"size":20790,"mtime":1608974458959,"results":"34","hashOfConfig":"21"},{"size":13974,"mtime":1609136303409,"results":"35","hashOfConfig":"21"},{"size":3815,"mtime":1609132418718,"results":"36","hashOfConfig":"21"},{"size":13856,"mtime":1609132399297,"results":"37","hashOfConfig":"21"},{"size":21404,"mtime":1608980254594,"results":"38","hashOfConfig":"21"},{"size":23494,"mtime":1608980094081,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"l8q0im",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\index.js",[],["85","86"],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\serviceWorker.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\App.js",["87"],"import React from 'react';\r\nimport { Layout, Menu, Avatar, message, Dropdown } from 'antd';\r\nimport {\r\n  FlagTwoTone,\r\n  HomeTwoTone,\r\n  FundTwoTone,\r\n  NotificationTwoTone,\r\n  UserOutlined,\r\n  LogoutOutlined,\r\n  CodeTwoTone,\r\n  PlusSquareTwoTone\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { NavLink, Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport Home from \"./home.js\";\r\nimport Challenges from \"./challenges.js\";\r\nimport Profile from \"./profile.js\";\r\nimport Scoreboard from \"./Scoreboard.js\";\r\nimport Announcements from \"./announcements.js\";\r\nimport Login from \"./login.js\";\r\nimport Admin from \"./admin.js\";\r\nimport Oops from \"./oops.js\";\r\nimport UserChallengeCreate from \"./userChallengeCreate.js\";\r\nimport { Transition, animated } from 'react-spring/renderprops';\r\n\r\n\r\nconst { Header, Content, Sider } = Layout;\r\n\r\nvar previousLocation = \"\"\r\nconst useirsCyber = false\r\nwindow.ipAddress = useirsCyber ? \"https://api.irscybersec.tk\" : \"https://api.sieberrsec.tech\"\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      collapsed: false,\r\n      current: \"Home\",\r\n      token: false,\r\n      logined: false,\r\n      username: \"\",\r\n      permissions: 0,\r\n      userScore: \"Loading...\"\r\n    };\r\n  }\r\n\r\n  // sider handler (for opening and closing sider)\r\n  onCollapse = collapsed => {\r\n    this.setState({ collapsed });\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    // Handle any page changes via manual typing/direct access\r\n    const page = this.props.location.pathname.slice(1);\r\n\r\n    if (previousLocation !== page) {\r\n      previousLocation = page\r\n      this.setState({ current: page })\r\n    }\r\n\r\n\r\n    // Handles \"remember me\" logins\r\n    if (!this.state.token) {\r\n      const token = localStorage.getItem(\"IRSCTF-token\")\r\n      const key = \"login\"\r\n\r\n      if (token !== null) {\r\n        message.loading({ content: \"Attempting to restore session...\", key, duration: 0 })\r\n        // Get permissions from server\r\n        fetch(window.ipAddress + \"/v1/account/type\", {\r\n          method: 'get',\r\n          headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n        }).then((results) => {\r\n          return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n          if (data.success === true) {\r\n            const username = token.split(\".\")[0]\r\n            this.setState({ permissions: data.type, token: token, username: username, logined: true })\r\n            message.success({ content: \"Session restored. Welcome back \" + username, key, duration: 2.5 })\r\n\r\n            this.obtainScore()\r\n          }\r\n          else {\r\n            //Might be a fake token since server does not have it, exit\r\n            this.setState({ token: false })\r\n            message.error({ content: \"Oops. Failed to restore session, please login again\", key, duration: 2.5 })\r\n          }\r\n        }).catch((error) => {\r\n          message.error({ content: \"Oops. There was an issue connecting to the server, please try again\", key, duration: 2.5 });\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // Callback function for Login component to set token and perms\r\n  handleLogin(receivedToken, permissions, remember) {\r\n    const username = receivedToken.split(\".\")[0]\r\n\r\n    const store = async () => {\r\n      if (remember === true) {\r\n        await localStorage.setItem('IRSCTF-token', receivedToken)\r\n\r\n      }\r\n      else {\r\n        await sessionStorage.setItem(\"IRSCTF-token\", receivedToken)\r\n      }\r\n\r\n      await this.setState({ token: receivedToken, permissions: permissions, username: username, logined: true })\r\n      message.success({ content: \"Logged In! Welcome back \" + username })\r\n    }\r\n\r\n    store()\r\n\r\n\r\n  }\r\n\r\n  handleLogout() {\r\n    sessionStorage.removeItem(\"IRSCTF-token\")\r\n    localStorage.removeItem(\"IRSCTF-token\")\r\n    this.setState({ token: false, logined: false })\r\n    message.info({ content: \"Logged out. See you next time :D!\" })\r\n  }\r\n\r\n  obtainScore() {\r\n    fetch(window.ipAddress + \"/v1/scores/\" + localStorage.getItem(\"IRSCTF-token\").split(\".\")[0], {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      console.log(data)\r\n\r\n      if (data.success === true) {\r\n        this.setState({ userScore: data.score })\r\n      }\r\n      else if (data.success === false && data.error === \"not-found\") {\r\n        this.setState({ userScore: \"Hidden\"})\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ position: \"fixed\" }}>\r\n\r\n        <Transition\r\n          items={this.state.logined}\r\n          native\r\n          from={{ opacity: 0, transform: 'translate3d(100%,0,0)', position: \"fixed\" }}\r\n          enter={{ opacity: 1, transform: 'translate3d(0%,0,0)', position: \"static\" }}\r\n          leave={{ opacity: 0, transform: 'translate3d(50%,0,0)', position: \"fixed\" }}\r\n        >\r\n          {toggle => (\r\n            props => {\r\n              if (toggle === true) {\r\n                return (\r\n                  <animated.div style={{ ...props, width: \"100vw\", height: \"100vh\", backgroundImage: \"url(\" + require(\"./assets/mainBG.png\").default + \")\", backgroundSize: \"cover\" }}>\r\n                    <Layout style={{ backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n                      <Sider style={{ width: \"15vw\", height: \"100vh\" }}>\r\n                        <div style={{ height: \"9ch\", padding: \"15px\", display: \"flex\", alignItems: \"center\", justifyItems: \"center\" }}>\r\n                          <img alt=\"Sieberrsec Logo\" src={require(\"./sieberrsec_ctf.svg\").default} style={{ width: \"100%\", height: \"100%\", marginRight: \"1vw\" }}></img>\r\n                        </div>\r\n                        <Dropdown overlay={\r\n                          <Menu>\r\n                            <Menu.Item key=\"0\">\r\n                              <NavLink to=\"/Profile\">\r\n                                <span>Profile </span>\r\n                                <UserOutlined />\r\n                              </NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Divider />\r\n                            <Menu.Item key=\"logout\" onClick={this.handleLogout.bind(this)}>\r\n                              <span style={{ color: \"#d32029\" }}>Logout <LogoutOutlined /></span>\r\n                            </Menu.Item>\r\n                          </Menu>}\r\n                          trigger={['click']}>\r\n                          <div className=\"buttonHover\"\r\n                            style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignContent: \"center\", alignItems: \"center\", height: \"13ch\", cursor: \"pointer\", paddingLeft: \"2ch\", marginBottom: \"2vh\" }}>\r\n                            <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignContent: \"center\", alignItems: \"center\", marginBottom: \"1vh\" }}>\r\n                              <h3 style={{ marginRight: \"1vw\", fontSize: \"2.3ch\" }}>{this.state.username}</h3>\r\n                              <Avatar size=\"large\" src=\"https://www.todayifoundout.com/wp-content/uploads/2017/11/rick-astley.png\" />\r\n                            </div>\r\n                            <div>\r\n                              <h3 style={{color: \"#d89614\", fontSize: \"2.3ch\" }}><b>Score:</b> {this.state.userScore}</h3>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown>\r\n\r\n                        <Menu\r\n                          selectedKeys={[this.state.current]}\r\n                          onSelect={(selection) => { this.setState({ current: selection.key }); this.obtainScore() }}\r\n                          //defaultOpenKeys={['']}\r\n                          mode=\"inline\"\r\n                          theme=\"dark\"\r\n\r\n                        > {/*\r\n        defaultSelectedKeys - default selected menu items\r\n        defaultOpenKeys - default opened sub menus\r\n        inline - Sidebar Menu\r\n        */}\r\n\r\n\r\n\r\n                          <Menu.Item key=\"Home\" style={{ fontSize: \"115%\", height: \"6ch\", display: \"flex\", alignItems: \"center\", marginTop: 0 }}>\r\n                            <NavLink to=\"/\">\r\n                              <HomeTwoTone style={{ fontSize: \"110%\" }} />\r\n                              <span>Home</span>\r\n                            </NavLink>\r\n                          </Menu.Item>\r\n\r\n                          <Menu.Item key=\"Challenges\" style={{ fontSize: \"115%\", height: \"6ch\", display: \"flex\", alignItems: \"center\" }}>\r\n                            <NavLink to=\"/Challenges\">\r\n                              <FlagTwoTone style={{ fontSize: \"110%\" }} />\r\n                              <span>Challenges</span>\r\n                            </NavLink>\r\n                          </Menu.Item>\r\n\r\n                          <Menu.Item key=\"Scoreboard\" style={{ fontSize: \"115%\", height: \"6ch\", display: \"flex\", alignItems: \"center\" }}>\r\n                            <NavLink to=\"/Scoreboard\">\r\n                              <FundTwoTone style={{ fontSize: \"110%\" }} />\r\n                              <span>Scoreboard</span>\r\n                            </NavLink>\r\n                          </Menu.Item>\r\n\r\n                          <Menu.Item key=\"Announcements\" style={{ fontSize: \"115%\", height: \"6ch\", display: \"flex\", alignItems: \"center\" }}>\r\n                            <NavLink to=\"/Announcements\">\r\n                              <NotificationTwoTone style={{ fontSize: \"110%\" }} />\r\n                              <span>Announcements</span>\r\n                            </NavLink>\r\n                          </Menu.Item>\r\n\r\n                          <Menu.Divider />\r\n\r\n                          {this.state.permissions === 1 && (\r\n                            <Menu.Item key=\"CreateChallenge\" style={{ fontSize: \"115%\", display: \"flex\", height: \"6ch\", alignItems: \"center\", color: \"#d32029\" }}>\r\n                              <NavLink to=\"/CreateChallenge\">\r\n                                <PlusSquareTwoTone style={{ fontSize: \"110%\" }} twoToneColor=\"#d89614\" />\r\n                                <span>Create Challenge</span>\r\n                              </NavLink>\r\n                            </Menu.Item>\r\n                          )}\r\n\r\n                          {this.state.permissions === 2 && (\r\n\r\n                            <Menu.Item key=\"Admin\" style={{ fontSize: \"115%\", display: \"flex\", height: \"6ch\", alignItems: \"center\", color: \"#d32029\" }}>\r\n                              <NavLink to=\"/Admin\">\r\n                                <CodeTwoTone style={{ fontSize: \"110%\" }} twoToneColor=\"#d32029\" />\r\n                                <span>Admin Panel</span>\r\n                              </NavLink>\r\n                            </Menu.Item>\r\n                          )}\r\n\r\n                        </Menu>\r\n                      </Sider>\r\n\r\n                      <Content style={{ width: \"85vw\", height: \"100vh\", position: \"static\", overflow: \"hidden\", margin: \"30px\" }}>\r\n                        <Route\r\n                          render={({ location, ...rest }) => (\r\n                            <div className=\"fill\">\r\n                              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\r\n                              <div className=\"content\">\r\n                                <Transition\r\n                                  native\r\n                                  items={location}\r\n                                  keys={location.pathname.split('/')[1]}\r\n                                  from={{ transform: 'translateY(100px)', opacity: 0, position: \"fixed\" }}\r\n                                  enter={{ transform: 'translateY(0px)', opacity: 1, position: \"static\" }}\r\n                                  leave={{ transform: 'translateY(100px)', opacity: 0, position: \"fixed\" }}>\r\n                                  {(loc, state) => style => (\r\n                                    <Switch location={state === 'update' ? location : loc}>\r\n                                      <Route exact path='/' render={(props) => <Home {...props} transition={style} />} />\r\n                                      <Route exact path='/Challenges' render={(props) => <Challenges {...props} transition={style} obtainScore={this.obtainScore.bind(this)} />} />\r\n                                      <Route exact path='/Challenges/:category' render={(props) => <Challenges {...props} transition={style} obtainScore={this.obtainScore.bind(this)} />} />\r\n                                      <Route exact path='/Scoreboard' render={(props) => <Scoreboard {...props} transition={style} />} />\r\n                                      <Route exact path='/Announcements' render={(props) => <Announcements {...props} transition={style} />} />\r\n                                      <Route exact path='/Profile' render={(props) => <Profile {...props} transition={style} token={this.state.token} username={this.state.username} />} />\r\n                                      <Route exact path='/Profile/:user' render={(props) => <Profile {...props} transition={style} token={this.state.token} username={this.state.username} />} />\r\n                                      <Route path='/Oops' render={(props) => <Oops {...props} transition={style} />} />\r\n\r\n                                      {this.state.permissions >= 1 ? (\r\n                                        <Route exact path='/CreateChallenge' render={(props) => <UserChallengeCreate {...props} transition={style} />} />\r\n                                      ) : (\r\n                                        <Route path='/Oops' render={(props) => <Oops {...props} transition={style} />} />\r\n                                        )}\r\n\r\n                                      {this.state.permissions === 2 ? (\r\n                                        <Route path='/Admin' render={(props) => <Admin {...props} transition={style} />} />\r\n                                      ) : (\r\n                                        <Route path='/Oops' render={(props) => <Oops {...props} transition={style} />} />\r\n                                        )}\r\n\r\n                                    </Switch>\r\n                                  )}\r\n                                </Transition>\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                        />\r\n\r\n                      </Content>\r\n                    </Layout>\r\n                  </animated.div>\r\n                )\r\n              }\r\n              else {\r\n                return (\r\n                  <animated.div style={{ ...props, position: \"absolute\" }}>\r\n                    <Login handleLogin={this.handleLogin.bind(this)}></Login>\r\n                  </animated.div>)\r\n              }\r\n            }\r\n          )}\r\n        </Transition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\home.js",["88","89","90","91","92","93","94"],"import React from 'react';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport {\r\n  FlagTwoTone,\r\n  HomeTwoTone,\r\n  FundTwoTone,\r\n  NotificationTwoTone,\r\n  SmileTwoTone,\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { animated } from 'react-spring/renderprops'\r\n\r\n\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <animated.div style={{ ...this.props.transition, height: \"100vh\", overflowY: \"auto\", backgroundColor: \"rgba(0, 0, 0, 0.7)\", border: \"5px solid transparent\", borderRadius: \"20px\" }}>\r\n        <Layout style={{ margin: \"20px\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n          <h2>Welcome to the IRS Cybersec CTF Platform!</h2>\r\n          <h3>This platform is in early alpha. Do report any bugs you find :D!</h3>\r\n          <br />\r\n          <h4><u><b>General Rules for the platform:</b></u></h4>\r\n          <p>\r\n            - Do not attack the server infrastructrure in anyway, if you found an exploit, please report it immediately. <br />\r\n          - Do not corrupt any challenges if you found a way to do so (that's just mean!)<br />\r\n          - No sharing of flags/solutions in chats. Try to not spoil this experience for anyone :D (Feel free to ask for help though)<br />\r\n          - If you need further clarification for any challenges, please contact the challenge author (whose name can be found in the challenge description)<br />\r\n          - Have fun, enjoy yourselves and we hope you learnt something :)!<br />\r\n          ~ <i>Sincerely, Sieberrsec 18/19 &amp; 19/20 &amp; 20/21</i>\r\n          </p>\r\n\r\n\r\n          <div style={{ textAlign: \"start\" }}>\r\n            <h3>Changelog:</h3>\r\n            <p><u>Version 0.14.0 (21/6/2020)</u></p>\r\n            <ul>\r\n              <li>Fixed challenge loading error</li>\r\n              <li>Overhauled challenge loading - It now only loads once when you click on challenges</li>\r\n              <li>Sorting by tags for each category</li>\r\n              <li>Fixed minor visual bug with login status</li>\r\n            </ul>\r\n            <p><u>Version 0.13.5 (15/6/2020)</u></p>\r\n            <ul>\r\n              <li>Improved loading screens</li>\r\n              <li>Fixed ghost hints</li>\r\n              <li>Sorting by Tags (There is a bug where the loading challenge indicator will not show :/)</li>\r\n            </ul>\r\n            <p><u>Version 0.13.0 (15/6/2020)</u></p>\r\n            <ul>\r\n              <li>Made mobile view slightly better</li>\r\n              <li>Added a few filters for challenges :D</li>\r\n              <li>Scoreboard now has dynamic sizing</li>\r\n              <li>Login indicator</li>\r\n              <li>Forms will in general, no longer clear itself when the request fails</li>\r\n              <li>Fixed edit challenge in admin panel to show correct author</li>\r\n              <li>Removed lots of redundant imports and console.log()s</li>\r\n            </ul>\r\n            <p><u>Version 0.12.6 (11/6/2020)</u></p>\r\n            <ul>\r\n              <li>Solve counts for each challenge</li>\r\n              <li>Even more page transitions</li>\r\n              <li>Fix scoreboard to take into account time of submission</li>\r\n            </ul>\r\n            <br />\r\n            <p><u>Version 0.12.5 (10/6/2020)</u></p>\r\n            <ul>\r\n              <li>Fixed Scoreboard</li>\r\n              <li>Page transitions</li>\r\n              <li>New admin panel tab - Submissions</li>\r\n              <li>Added sieberrsec favicon</li>\r\n              <li>Fixed Free Hints text</li>\r\n            </ul>\r\n          </div>\r\n        </Layout>}\r\n      </animated.div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challenges.js",["95"],"import React from 'react';\r\nimport { Layout, Card, List, Progress, message, Button, Radio, Select } from 'antd';\r\nimport {\r\n  FileUnknownTwoTone,\r\n  LeftCircleOutlined,\r\n  AppstoreOutlined,\r\n  GroupOutlined\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\nimport ChallengesCategory from \"./challengesCategory.js\";\r\nimport ChallengesTagSort from \"./challengesTagSort.js\";\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { Transition, animated } from 'react-spring/renderprops';\r\n\r\nconst { Meta } = Card;\r\nconst { Option } = Select;\r\n\r\nconst categoryImages = [require(\"./assets/catPhoto1.jpg\").default, require(\"./assets/catPhoto2.jpg\").default, require(\"./assets/catPhoto3.jpg\").default]\r\n\r\n\r\n\r\nvar i = -1\r\n\r\nclass Challenges extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.child = React.createRef();\r\n\r\n    this.state = {\r\n      categories: [],\r\n      challengeCategory: false,\r\n      currentCategory: false,\r\n      originalData: [],\r\n      tagData: [],\r\n      sortByTags: false,\r\n      loadingChall: false,\r\n      RadioValue: \"Category\",\r\n      currentCategoryChallenges: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ loadingChall: true })\r\n\r\n    this.fetchCategories()\r\n  }\r\n\r\n  parseCategories(data) {\r\n    for (let x = 0; x < data.length; x++) {\r\n      let currentCategory = data[x].challenges\r\n      let solvedStats = {\r\n        challenges: currentCategory.length,\r\n        solved: 0,\r\n        percentage: 0\r\n      }\r\n\r\n      for (let y = 0; y < currentCategory.length; y++) {\r\n        if (currentCategory[y].solved === true) {\r\n          solvedStats.solved += 1\r\n        }\r\n      }\r\n\r\n      solvedStats.percentage = Math.round((solvedStats.solved / solvedStats.challenges) * 100)\r\n      data[x].challenges = solvedStats\r\n    }\r\n\r\n    return data;\r\n\r\n  }\r\n\r\n  fetchCategories = async () => {\r\n    await fetch(window.ipAddress + \"/v1/challenge/list\", {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then(async (data) => {\r\n\r\n      if (data.success === true) {\r\n\r\n        let originalData = JSON.parse(JSON.stringify(data.challenges))\r\n        const newData = await this.parseCategories(data.challenges) //this statement changes the object data\r\n\r\n        //convert array to dict\r\n\r\n        let originalDataDictionary = {}\r\n        for (let i = 0; i < originalData.length; i++) {\r\n          originalDataDictionary[originalData[i]._id] = originalData[i].challenges\r\n        }\r\n\r\n        await this.setState({ categories: newData, originalData: originalDataDictionary, loadingChall: false })\r\n\r\n        console.log(this.state.originalData)\r\n        const category = this.props.match.params.category;\r\n        if (typeof category !== \"undefined\") {\r\n          await this.setState({ challengeCategory: true, currentCategory: decodeURIComponent(category), currentCategoryChallenges: this.state.originalData[decodeURIComponent(category)] })\r\n        }\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  sortCats(value) {\r\n    this.child.current.sortCats(value)\r\n  }\r\n\r\n  sortDifferent(value) {\r\n    this.setState({ RadioValue: value.target.value })\r\n    if (value.target.value === \"Type\" && !this.state.sortByTags) {\r\n      if (this.state.currentCategory) { //currentCategory is whether a category has been set, challengeCategory is for the visibility of the component\r\n        let originalData = this.state.originalData\r\n        //Since the category is not the key, we will need to loop through the list to find the category\r\n        this.setState({ tagData: [originalData[this.state.currentCategory]], sortByTags: true, challengeCategory: false })\r\n\r\n      }\r\n      else {\r\n        this.setState({ sortByTags: true, tagData: this.state.originalData })\r\n      }\r\n\r\n    }\r\n    else if (this.state.sortByTags && value.target.value === \"Category\") {\r\n\r\n      if (this.state.currentCategory) {\r\n        this.setState({ sortByTags: false, challengeCategory: true })\r\n      }\r\n      else {\r\n        this.setState({ sortByTags: false })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleRefresh = async (tagSorting) => {\r\n\r\n    await this.fetchCategories()\r\n    if (tagSorting) {\r\n      await this.sortDifferent({ target: { value: \"Type\" } })\r\n    }\r\n    else {\r\n      await this.setState({ currentCategoryChallenges: this.state.originalData[this.state.currentCategory] })\r\n    }\r\n\r\n    await this.props.obtainScore()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <animated.div style={{ ...this.props.transition, height: \"100vh\", overflowY: \"auto\", backgroundColor: \"rgba(0, 0, 0, 0.7)\", border: \"5px solid transparent\", borderRadius: \"20px\" }}>\r\n        <Layout style={{ margin: \"20px\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n          <div id=\"Header\" style={{ positon: \"relative\", width: \"100%\", height: \"40vh\", textAlign: \"center\", borderStyle: \"solid\", borderWidth: \"0px 0px 3px 0px\", borderColor: \"#1890ff\", lineHeight: \"1.1\", marginBottom: \"1.5vh\", backgroundColor: \"rgba(0, 0, 0, 1)\" }}>\r\n            <img alt=\"Banner\" style={{ width: \"100%\", height: \"100%\", opacity: 0.6 }} src={require(\"./assets/challenges_bg.jpg\").default} />\r\n\r\n            {!this.state.currentCategory && (\r\n              <h1 style={{\r\n                color: \"white\",\r\n                position: \"relative\",\r\n                bottom: \"60%\",\r\n                fontSize: \"250%\",\r\n                letterSpacing: \".3rem\",\r\n                backgroundColor: \"#164c7e\",\r\n                paddingTop: \"10px\",\r\n                paddingBottom: \"10px\",\r\n                fontWeight: 300\r\n              }}> CHALLENGES\r\n              </h1>\r\n            )}\r\n\r\n            {this.state.currentCategory && (\r\n              <h1 style={{\r\n                color: \"white\",\r\n                position: \"relative\",\r\n                bottom: \"70%\",\r\n                fontSize: \"140%\",\r\n                letterSpacing: \".3rem\",\r\n                backgroundColor: \"#164c7e\",\r\n                paddingTop: \"10px\",\r\n                fontWeight: 300\r\n              }}> CHALLENGES <p style={{ fontSize: \"210%\", letterSpacing: \"normal\", paddingBottom: \"10px\", fontWeight: 400 }}>{this.state.currentCategory}</p></h1>\r\n\r\n            )}\r\n\r\n\r\n          </div>\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignContent: \"center\", marginBottom: \"3vh\" }}>\r\n\r\n            <Button size=\"large\" disabled={!this.state.currentCategory} icon={<LeftCircleOutlined />} style={{backgroundColor: \"#1f1f1f\"}} onClick={() => { this.props.history.push(\"/Challenges\"); this.setState({ challengeCategory: false, currentCategory: false, sortByTags: false, RadioValue: \"Category\" }) }} size=\"large\">Back</Button>\r\n            <div>\r\n              <Select disabled={!(this.state.currentCategory && !this.state.sortByTags)} defaultValue=\"points\" style={{ marginRight: \"1.5vw\", width: \"20ch\", backgroundColor: \"#1f1f1f\" }} onChange={this.sortCats.bind(this)}>\r\n                <Option value=\"points\">Sort by Points</Option>\r\n                <Option value=\"abc\">Sort A→Z</Option>\r\n                <Option value=\"abcrev\">Sort Z→A</Option>\r\n              </Select>\r\n              <Radio.Group buttonStyle=\"solid\" size=\"large\" onChange={this.sortDifferent.bind(this)} value={this.state.RadioValue} style={{ backgroundColor: \"#1f1f1f\" }}>\r\n                <Radio.Button value=\"Category\">Sort By Category <AppstoreOutlined /> </Radio.Button>\r\n                <Radio.Button value=\"Type\">Sort By Type <GroupOutlined /> </Radio.Button>\r\n              </Radio.Group>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div>\r\n            <Transition\r\n              items={this.state.loadingChall}\r\n              from={{ opacity: 0 }}\r\n              enter={{ opacity: 1 }}\r\n              leave={{ opacity: 0 }}>\r\n              {toggle => (\r\n                props => {\r\n                  if (toggle === true) {\r\n                    return (<div style={{ ...props, position: \"absolute\", left: \"50%\", transform: \"translate(-50%, 0%)\", zIndex: 10 }}>\r\n                      <Ellipsis color=\"#177ddc\" size={120} ></Ellipsis>\r\n                    </div>)\r\n                  }\r\n                  else {\r\n                    return (<div style={{ ...props }}>\r\n                      {!this.state.challengeCategory && !this.state.sortByTags && (\r\n                        <List\r\n                          grid={{\r\n                            xs: 1,\r\n                            sm: 1,\r\n                            md: 2,\r\n                            lg: 3,\r\n                            xl: 3,\r\n                            xxl: 4,\r\n                            gutter: 20\r\n                          }}\r\n                          dataSource={this.state.categories}\r\n                          locale={{\r\n                            emptyText: (\r\n                              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                                <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                                <h1 style={{ fontSize: \"200%\" }}>Oops, no challenges have been created.</h1>\r\n                              </div>\r\n                            )\r\n                          }}\r\n                          renderItem={item => {\r\n                            i = 0\r\n\r\n                            return (\r\n                              <List.Item key={item._id}>\r\n                                <Link to={\"/Challenges/\" + item._id}>\r\n                                  <div onClick={() => { this.setState({ challengeCategory: true, currentCategory: item._id, currentSolvedStatus: item.challenges, currentCategoryChallenges: this.state.originalData[item._id] }) }}>\r\n                                    <Card\r\n                                      hoverable\r\n                                      type=\"inner\"\r\n                                      bordered={true}\r\n                                      bodyStyle={{ backgroundColor: \"#262626\" }}\r\n                                      className=\"card-design\"\r\n                                      style={{ overflow: \"hidden\" }}\r\n                                      cover={<img style={{ height: \"35ch\", width: \"55ch\", overflow: \"hidden\" }} alt=\"Category Card\" src={categoryImages[i]} />}\r\n                                    >\r\n                                      <Meta\r\n                                        title={\r\n                                          <div id=\"Title\" style={{ display: \"flex\", color: \"#f5f5f5\", flexDirection: \"row\", alignContent: \"center\", alignItems: \"center\" }}>\r\n                                            <h1 style={{ color: \"white\", fontSize: \"2.5ch\", width: \"40ch\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>{item._id}</h1>\r\n                                            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\r\n                                              <h2 style={{ fontSize: \"2.5ch\", marginLeft: \"1vw\", color: \"#faad14\", fontWeight: 700 }}>{item.challenges.solved}/{item.challenges.challenges}</h2>\r\n                                              <Progress type=\"circle\" percent={item.challenges.percentage} width=\"7ch\" strokeColor={{\r\n                                                '0%': '#177ddc',\r\n                                                '100%': '#49aa19',\r\n                                              }} style={{ marginLeft: \"1vw\", fontSize: \"2ch\" }} />\r\n                                            </div>\r\n                                          </div>\r\n                                        }\r\n                                      />\r\n                                    </Card> {/*Pass entire datasource as prop*/}\r\n                                  </div>\r\n                                </Link>\r\n                              </ List.Item>\r\n                            )\r\n                          }\r\n                          }\r\n                        />\r\n                      )}\r\n\r\n                      {this.state.challengeCategory && (\r\n                        <ChallengesCategory handleRefresh={this.handleRefresh.bind(this)} ref={this.child} currentCategoryChallenges={this.state.currentCategoryChallenges} category={this.state.currentCategory}></ChallengesCategory>\r\n                      )}\r\n\r\n                      {this.state.sortByTags && (\r\n                        <ChallengesTagSort tagData={this.state.tagData} handleRefresh={this.handleRefresh.bind(this)}></ChallengesTagSort>\r\n                      )}\r\n                    </div>)\r\n                  }\r\n\r\n\r\n                }\r\n              )\r\n              }\r\n            </Transition>\r\n          </div>\r\n        </Layout>\r\n      </animated.div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Challenges;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\Scoreboard.js",["96"],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\profile.js",["97"],"import React from 'react';\r\nimport { Layout, message, Empty, Divider, Avatar, Table, Button, Modal, Form, Input } from 'antd';\r\nimport { animated } from 'react-spring/renderprops';\r\nimport { AreaChart, Area, Tooltip, XAxis, YAxis, CartesianGrid, Label, ResponsiveContainer } from \"recharts\";\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { orderBy } from \"lodash\";\r\nimport {\r\n    KeyOutlined,\r\n    FileUnknownTwoTone\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\n\r\nconst { Column } = Table;\r\n\r\nconst ChangePasswordForm = (props) => {\r\n    const [form] = Form.useForm();\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            name=\"changePassword\"\r\n            className=\"change-password-form\"\r\n            onFinish={(values) => { props.resetPassword(values) }}\r\n            style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", width: \"100%\", marginBottom: \"2vh\" }}\r\n        >\r\n            <h3>Old Password:</h3>\r\n            <Form.Item\r\n                name=\"oldPass\"\r\n                rules={[{ required: true }]}>\r\n\r\n                <Input.Password allowClear placeholder=\"Enter your old password.\" />\r\n            </Form.Item>\r\n            <h3>New Password:</h3>\r\n            <Form.Item\r\n                name=\"newPassword\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your new password',\r\n                    },\r\n                ]}\r\n                hasFeedback\r\n            >\r\n\r\n                <Input.Password allowClear placeholder=\"Enter a new password\" />\r\n            </Form.Item>\r\n\r\n            <h3>Confirm New Password:</h3>\r\n            <Form.Item\r\n                name=\"confirm\"\r\n                dependencies={['newPassword']}\r\n                hasFeedback\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please retype your new password to confirm',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                        validator(rule, value) {\r\n                            if (!value || getFieldValue('newPassword') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject('Oops, the 2 passwords do not match');\r\n                        },\r\n                    }),\r\n                ]}\r\n            >\r\n\r\n                <Input.Password allowClear placeholder=\"Confirm new password\" />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" icon={<KeyOutlined />}>Change Password</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            solved: [],\r\n            score: 0,\r\n            width: 0,\r\n            height: 0,\r\n            challenges: [],\r\n            targetUser: \"\",\r\n            loading: true,\r\n            userScore: \"Loading...\",\r\n            graphData: [],\r\n            passwordChangeModal: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const startup = async () => {\r\n            await this.setState({ loading: true })\r\n            const username = this.props.match.params.user;\r\n            if (typeof username !== \"undefined\") {\r\n                await this.setState({ targetUser: username })\r\n            }\r\n            else {\r\n                await this.setState({ targetUser: this.props.username })\r\n            }\r\n            await this.unpackChallengesData();\r\n        };\r\n        startup();\r\n    }\r\n\r\n    resetPassword(values) {\r\n        fetch(window.ipAddress + \"/v1/account/password\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n            body: JSON.stringify({\r\n                \"password\": values.oldPass,\r\n                \"new_password\": values.newPassword,\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            console.log(data)\r\n\r\n            if (data.success === true) {\r\n                message.success({ content: \"Password changed successfully.\" })\r\n                this.setState({ passwordChangeModal: false })\r\n            }\r\n            else if (data.error === \"wrong-password\") {\r\n                message.error({ content: \"Old password is incorrect. Please try again.\" })\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error.\" })\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n        })\r\n    }\r\n\r\n    //Marvel in glory at the hideous mess of tangled backend handling.\r\n    //Gawk at the terrible use of index-based for loops when streams exist now\r\n    //Try, and fail, to interpret the sheer rubbish that is this method.\r\n    //But it works. And that is enough for me to bury it forever.\r\n    //- Leonard.\r\n    unpackChallengesData() {\r\n        fetch(window.ipAddress + \"/v1/scoreboard/\" + this.state.targetUser, {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            console.log(data)\r\n            if (data.success === true) {\r\n                let challengeDS = []\r\n                let challengeArray = orderBy(data.scores, [\"timestamp\"], [\"desc\"])\r\n                let challengeArrayReversed = orderBy(data.scores, [\"timestamp\"], [\"asc\"])\r\n                let graphData = []\r\n                let graphPoint = {}\r\n                let scoreTotal = 0\r\n\r\n                for (let x = 0; x < challengeArray.length; x++) {\r\n                    //Plot graph\r\n                    scoreTotal += challengeArrayReversed[x].points\r\n                    graphPoint = {\r\n                        Score: scoreTotal,\r\n                        Time: new Date(challengeArrayReversed[x].timestamp).toLocaleString(\"en-US\", { timeZone: \"Asia/Singapore\" })\r\n                    }\r\n                    graphData.push(graphPoint)\r\n\r\n                    //Handle table\r\n                    let currentDS = {\r\n                        key: String(x),\r\n                        challenge: \"\",\r\n                        score: \"\",\r\n                        time: \"\"\r\n                    }\r\n                    const currentStuff = challengeArray[x]\r\n                    //Current record is a hint\r\n                    if (currentStuff.type === \"hint\") {\r\n                        currentDS.challenge = \"Purchased Hint For: \" + currentStuff.challenge\r\n                    }\r\n                    else {\r\n                        currentDS.challenge = currentStuff.challenge\r\n                    }\r\n                    currentDS.score = currentStuff.points\r\n                    const dateTime = Math.abs(new Date() - new Date(currentStuff.timestamp)) / 1000 //no. of seconds since the challenge was completed/hint bought\r\n                    let minutes = Math.ceil(dateTime / 60)\r\n                    let hours = 0\r\n                    let days = 0\r\n                    let months = 0\r\n                    let years = 0\r\n                    if (minutes >= 60) {\r\n                        hours = Math.floor(minutes / 60)\r\n                        minutes = minutes - hours * 60\r\n\r\n                        if (hours >= 24) {\r\n                            days = Math.floor(hours / 24)\r\n                            hours = hours - days * 24\r\n\r\n                            if (days >= 30) {\r\n                                months = Math.floor(days / 30)\r\n                                days = days - months * 30\r\n\r\n                                if (months >= 12) {\r\n                                    years = Math.floor(months / 12)\r\n                                    months = months - years * 12\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    let finalTime = \" ago.\"\r\n                    if (minutes !== 0) {\r\n                        finalTime = minutes.toString() + \" minutes \" + finalTime\r\n                    }\r\n                    if (hours !== 0) {\r\n                        finalTime = hours.toString() + \" hours \" + finalTime\r\n                    }\r\n                    if (days !== 0) {\r\n                        finalTime = days.toString() + \" days \" + finalTime\r\n                    }\r\n                    if (months !== 0) {\r\n                        finalTime = months.toString() + \" months \" + finalTime\r\n                    }\r\n                    if (years !== 0) {\r\n                        finalTime = years.toString() + \" years \" + finalTime\r\n                    }\r\n                    currentDS.time = finalTime\r\n\r\n                    challengeDS.push(currentDS)\r\n                }\r\n\r\n                //push finalPoint\r\n                graphPoint = {\r\n                    Score: scoreTotal,\r\n                    Time: new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Singapore\" })\r\n                }\r\n                graphData.push(graphPoint)\r\n\r\n                console.log(this.state.targetUser)\r\n\r\n                fetch(window.ipAddress + \"/v1/scores/\" + this.state.targetUser, {\r\n                    method: 'get',\r\n                    headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n                }).then((results) => {\r\n                    return results.json(); //return data in JSON (since its JSON data)\r\n                }).then((data) => {\r\n                    console.log(data)\r\n\r\n                    if (data.success === true) {\r\n                        this.setState({ userScore: data.score, scores: challengeDS, graphData: graphData, loading: false })\r\n                    }\r\n                    else if (data.success === false && data.error === \"not-found\") {\r\n                        this.setState({ userScore: \"Hidden\", scores: [], graphData: [], loading: false })\r\n                    }\r\n                    else {\r\n                        message.error({ content: \"Oops. Unknown error\" })\r\n                    }\r\n\r\n                }).catch((error) => {\r\n                    console.log(error)\r\n                    message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n                })\r\n            }\r\n            else if (data.success == false) {\r\n                fetch(window.ipAddress + \"/v1/scores/\" + this.state.targetUser, {\r\n                    method: 'get',\r\n                    headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n                }).then((results) => {\r\n                    return results.json(); //return data in JSON (since its JSON data)\r\n                }).then((data) => {\r\n                    console.log(data)\r\n\r\n                    if (data.success === true) {\r\n                        this.setState({ userScore: data.score, scores: [], graphData: [], loading: false })\r\n                    }\r\n                    else if (data.success === false && data.error === \"not-found\") {\r\n                        this.setState({ userScore: \"Hidden\", scores: [], graphData: [], loading: false })\r\n                    }\r\n                    else {\r\n                        message.error({ content: \"Oops. Unknown error\" })\r\n                    }\r\n\r\n                }).catch((error) => {\r\n                    console.log(error)\r\n                    message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n                })\r\n            }\r\n\r\n            else { //Guess we'll die.\r\n                console.log(\"not found\")\r\n                this.setState({ targetUser: false })\r\n                message.error({ content: \"Something went wrong fetching your challenges.\" })\r\n            }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            message.error({ content: \"Something went wrong fetching your challenges.\" })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <animated.div style={{ ...this.props.transition, height: \"100vh\", overflowY: \"auto\", backgroundColor: \"rgba(0, 0, 0, 0.7)\", border: \"5px solid transparent\", borderRadius: \"20px\" }}>\r\n                <Layout style={{ margin: \"20px\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n\r\n                    <Modal title=\"Change Password\" visible={this.state.passwordChangeModal} onCancel={() => { this.setState({ passwordChangeModal: false }) }} footer={null}>\r\n                        <ChangePasswordForm resetPassword={this.resetPassword.bind(this)} />\r\n                    </Modal>\r\n\r\n                    {this.state.loading && (\r\n                        <div style={{ position: \"absolute\", left: \"50%\", transform: \"translate(-50%, 0%)\", zIndex: 10 }}>\r\n                            <Ellipsis color=\"#177ddc\" size={120} ></Ellipsis>\r\n                        </div>\r\n                    )}\r\n                    {\r\n                        !this.state.targetUser && !this.state.loading && (\r\n                            <Layout style={{ height: \"100%\", width: \"100%\" }}>\r\n                                <br /><br /><br />\r\n                                <Empty>That user doesn't exist</Empty>\r\n                            </Layout>\r\n                        )\r\n                    }\r\n                    {\r\n                        this.state.targetUser && !this.state.loading && (\r\n                            <Layout style={{ height: \"100%\", width: \"100%\", padding: \"3%\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n                                <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                                    <div style={{ display: \"flex\" }}>\r\n                                        <div style={{ display: \"flex\", marginRight: \"5ch\", alignItems: \"center\", justifyItems: \"center\" }}>\r\n                                            <Avatar style={{ backgroundColor: \"Red\", marginRight: \"3ch\", width: \"10ch\", height: \"10ch\" }} size='large' src=\"https://www.todayifoundout.com/wp-content/uploads/2017/11/rick-astley.png\" />\r\n                                            <h1 style={{ fontSize: \"5ch\" }}>{this.state.targetUser}</h1>\r\n                                        </div>\r\n                                        <div>\r\n                                            <h1 style={{ fontSize: \"5ch\", color: \"#faad14\" }}><span style={{ color: \"#d48806\", fontSize: \"1.5ch\" }}><u>Score:</u> </span>{this.state.userScore}</h1>\r\n                                        </div>\r\n                                    </div>\r\n                                    {this.state.targetUser !== this.props.username && (\r\n                                        <div>\r\n                                            <Button size=\"large\" style={{ backgroundColor: \"#1f1f1f\" }} onClick={() => { this.setState({ passwordChangeModal: true }) }}>Change Password</Button>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <Divider />\r\n                                <h1 style={{ fontSize: \"3ch\" }}>Score History</h1>\r\n                                <div style={{ height: 375, width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0.3)\", border: \"5px solid transparent\", borderRadius: \"20px\", padding: \"10px\", margin: \"10px\" }}>\r\n                                    <ResponsiveContainer width=\"90%\" height={350}>\r\n                                        <AreaChart height={350} data={this.state.graphData}\r\n                                            margin={{ top: 10, right: 15, left: 15, bottom: 15 }}>\r\n\r\n                                            <defs>\r\n                                                <linearGradient id=\"color1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                                    <stop offset=\"5%\" stopColor=\"#791a1f\" stopOpacity={0.3} />\r\n                                                    <stop offset=\"95%\" stopColor=\"#f89f9a\" stopOpacity={0.1} />\r\n                                                </linearGradient>\r\n                                            </defs>\r\n                                            <XAxis dataKey=\"Time\">\r\n                                                <Label offset={-5} position=\"insideBottom\" style={{ fill: 'rgba(207, 207, 207, 1)' }}>\r\n                                                    Time\r\n                                                    </Label>\r\n                                            </XAxis>\r\n                                            <YAxis >\r\n                                                <Label offset={-10} position='insideLeft' style={{ fill: 'rgba(207, 207, 207, 1)' }}>\r\n                                                    Score\r\n                                                </Label>\r\n                                            </YAxis>\r\n                                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n\r\n                                            <Tooltip labelStyle={{ backgroundColor: \"#1c2b3e\" }} contentStyle={{ backgroundColor: \"#1c2b3e\" }} wrapperStyle={{ backgroundColor: \"#1c2b3e\" }} />\r\n                                            <Area isAnimationActive={false} type=\"monotone\" dataKey=\"Score\" stroke=\"#d32029\" fillOpacity={1} fill=\"url(#color1)\" />\r\n                                        </AreaChart>\r\n                                    </ResponsiveContainer>\r\n\r\n                                </div>\r\n                                <div style={{ height: \"70%\", width: \"100%\", minWidth: \"80vw\" }}>\r\n                                    <Table style={{ marginTop: \"2vh\" }} dataSource={this.state.scores} pagination={{ pageSize: 10 }} locale={{\r\n                                        emptyText: (\r\n                                            <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                                                <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                                                <h1 style={{ fontSize: \"200%\" }}>{this.state.targetUser} has not completed any challenges/bought any hints</h1>\r\n                                            </div>\r\n                                        )\r\n                                    }}>\r\n                                        <Column width={1} title=\"Challenge/Hint\" dataIndex=\"challenge\" key=\"challenge\" />\r\n                                        <Column width={30} title=\"Score Change\" dataIndex=\"score\" key=\"score\" />\r\n                                        <Column width={30} title=\"Timestamp\" dataIndex=\"time\" key=\"time\" />\r\n                                    </Table>\r\n                                </div>\r\n                            </Layout>\r\n\r\n                        )\r\n                    }\r\n                </Layout>\r\n            </animated.div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Profile;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\admin.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\announcements.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\oops.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\login.js",["98","99","100","101"],"import React from 'react';\r\nimport { Input, Button, Icon, Layout, Form, Checkbox, message } from 'antd';\r\nimport {\r\n    UserOutlined,\r\n    LockOutlined,\r\n    MailOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Content } = Layout\r\n\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            failedLogin: false,\r\n            errorFetch: false,\r\n            login: true,\r\n            register: false,\r\n            loading: false,\r\n        };\r\n    }\r\n\r\n    handleRegister = values => {\r\n        this.setState({ loading: true })\r\n        fetch(window.ipAddress + \"/v1/account/create\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"username\": values.username,\r\n                \"password\": values.password,\r\n                \"email\": values.email\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n            if (data.success === true) {\r\n                message.success({ content: \"Woohoo! Successfully registered, you can now login via the login screen!\" })\r\n\r\n            }\r\n            else if (data.error === \"email-taken\") {\r\n                message.warn({ content: \"Oops. Email already taken\" })\r\n            }\r\n            else if (data.error === \"username-taken\") {\r\n                message.warn({ content: \"Oops. Username already taken\" })\r\n            }\r\n            else if (data.error === \"email-formatting\") {\r\n                message.error({ content: \"Oops, registration is not enabled for any email domains outside HCI\"})\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n\r\n            this.setState({ loading: false })\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n            this.setState({ loading: false })\r\n        })\r\n    }\r\n\r\n    handleLogin = values => {\r\n        this.setState({ loading: true })\r\n        fetch(window.ipAddress + \"/v1/account/login\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"username\": values.username,\r\n                \"password\": values.password,\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n\r\n            const login = async () => {\r\n                if (data.success === true) {\r\n                    await this.props.handleLogin(data.token, data.permissions, values.remember)\r\n                }\r\n                else {\r\n\r\n                    if (data.error === \"wrong-username\") {\r\n                        message.error({ content: \"Oops. Username does not exist\" })\r\n                    }\r\n                    else if (data.error === \"wrong-password\") {\r\n                        message.error({ content: \"Oops. Incorrect password\" })\r\n                    }\r\n                    else {\r\n                        message.error({ content: \"Oops. Unknown error\" })\r\n                    }\r\n\r\n                }\r\n                this.setState({ loading: false })\r\n            }\r\n            login()\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting to the server\" })\r\n            this.setState({ loading: false })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Layout style={{ maxWidth: \"100vw\", maxHeight: \"100vh\", overflow: \"hidden\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n                <Content style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", backgroundColor: \"rgba(0, 0, 0, 0)\", backgroundImage: \"url(\" + require(\"./assets/mainBG.png\").default + \")\" }}>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", height: \"100vh\", width: \"70vw\", backgroundSize: \"cover\", overflow: `hidden` }}>\r\n                        <div style={{ fontSize: \"7ch\", color: \"white\" }}>\r\n                            <span style={{ fontWeight: \"500\", textShadow: '1px -1px 1px -1px #000000' }}> IRS Cybersec CTF Platform</span>\r\n                        </div>\r\n                        <div style={{ color: \"white\", fontSize: \"5ch\" }}>\r\n                            <p style={{ textShadow: '1px 1px 1px 1px #000000' }}>The Wheel. Reinvented.™</p>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: \"rgba(0, 0, 0, 0.8)\", alignItems: \"center\", justifyContent: \"center\", height: \"100vh\", width: \"30vw\", boxShadow: \"-5px 0px 20px black\" }}>\r\n                        <div style={{ padding: \"15px\", marginBottom: \"5vh\" }}>\r\n                            <img src={require(\"./sieberrsec_ctf.svg\").default} style={{ width: \"100%\" }}></img>\r\n                        </div>\r\n                        {this.state.login && (\r\n                            <div>\r\n                                <h1 style={{ color: \"white\", fontSize: \"3ch\" }}>Sign In <Icon type=\"unlock\" theme=\"twoTone\" /> </h1>\r\n                                <Form\r\n                                    name=\"normal_login\"\r\n                                    className=\"login-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={this.handleLogin}\r\n                                    style={{ width: \"25vw\" }}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Please enter your username.' }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: 'Please enter your password.' }]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            allowClear\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                                            <Checkbox>Remember me</Checkbox>\r\n                                        </Form.Item>\r\n\r\n                                        <a className=\"login-form-forgot\" href=\"\">Forgot password</a>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item>\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ marginRight: \"1vw\" }} loading={this.state.loading}>Log in</Button>\r\n                                        Or <a href=\"#\" onClick={() => { this.setState({ login: false, register: true }) }} >Register now!</a>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                        {this.state.register && (\r\n                            <div>\r\n                                <h1 style={{ color: \"white\", fontSize: \"2vw\" }}>Register an Account <Icon type=\"unlock\" theme=\"twoTone\" /> </h1>\r\n                                <Form\r\n                                    name=\"register_form\"\r\n                                    className=\"register-form\"\r\n                                    onFinish={this.handleRegister}\r\n                                    style={{ width: \"25vw\" }}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Please enter a username' }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Enter a new username\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        rules={[{ required: true, message: 'Please enter an email' },\r\n                                        {\r\n                                            type: 'email',\r\n                                            message: \"Please enter a valid email\",\r\n                                        }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<MailOutlined />} placeholder=\"Enter a new email\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please input your password!',\r\n                                            },\r\n                                        ]}\r\n                                        hasFeedback\r\n                                    >\r\n                                        <Input.Password allowClear placeholder=\"Enter a new password\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"confirm\"\r\n                                        dependencies={['password']}\r\n                                        hasFeedback\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please confirm your password!',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                                validator(rule, value) {\r\n                                                    if (!value || getFieldValue('password') === value) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject('Oops, the 2 passwords do not match');\r\n                                                },\r\n                                            }),\r\n                                        ]}\r\n                                    >\r\n                                        <Input.Password allowClear placeholder=\"Confirm new password\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ marginBottom: \"1.5vh\" }}>Register</Button>\r\n\r\n                                        <p>Already have an account? <a href=\"#\" onClick={() => { this.setState({ login: true, register: false }) }}>Login Here!</a></p>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\userChallengeCreate.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesCategory.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSort.js",["102","103"],"import React from 'react';\r\nimport { Layout, Card, List, message, Modal, Tag, Input, Button, Tabs, Avatar, Form, notification, Divider } from 'antd';\r\nimport {\r\n  LoadingOutlined,\r\n  UnlockOutlined,\r\n  ProfileOutlined,\r\n  FlagOutlined,\r\n  SmileOutlined,\r\n  FileUnknownTwoTone\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport JsxParser from 'react-jsx-parser';\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { orderBy } from 'lodash';\r\n\r\n\r\nconst { Meta } = Card;\r\nconst { TabPane } = Tabs;\r\n\r\nconst SubmitFlagForm = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"submit-flag\"\r\n      className=\"submit-flag-form\"\r\n      onFinish={(values) => { props.submitFlag(values); form.resetFields() }}\r\n      style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", marginTop: \"2vh\" }}\r\n    >\r\n      <Form.Item\r\n        name=\"flag\"\r\n        rules={[{ required: true, message: 'Hint: Flags are not blank.' }]}>\r\n        <Input disabled={props.currentChallengeSolved} style={{ width: \"45ch\" }} placeholder={props.currentChallengeStatus} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button disabled={props.currentChallengeSolved} type=\"primary\" htmlType=\"submit\" icon={<FlagOutlined />}>Submit</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\n\r\nclass ChallengesTagSort extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      challenges: [],\r\n      challengeModal: false,\r\n      currentChallenge: \"\",\r\n      currentChallengeStatus: \"\",\r\n      viewingChallengeDetails: {\r\n        name: \"\",\r\n        category: this.props.category,\r\n        description: \"\",\r\n        points: 0,\r\n        author: \"\",\r\n        created: \"\",\r\n        solves: [],\r\n        max_attempts: 0,\r\n        tags: [],\r\n        hints: [],\r\n      },\r\n      challengeTags: [],\r\n      loadingChallenge: false,\r\n      currentChallengeSolved: false,\r\n      challengeHints: [],\r\n      attemptsLeft: \"\",\r\n      hintContent: \"\",\r\n      hintModal: false,\r\n      currentSorting: \"points\",\r\n      tagLists: [],\r\n      loadingTag: false\r\n\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const startup = async () => {\r\n      await this.sortByTags()\r\n    }\r\n\r\n    startup()\r\n  }\r\n\r\n  sortByTags() {\r\n\r\n    let originalData = this.props.tagData\r\n    let tag = {}\r\n    this.setState({ loadingTag: true })\r\n\r\n\r\n    for (const [key, value] of Object.entries(originalData)) {\r\n      let currentCat = originalData[key]\r\n      for (let x = 0; x < currentCat.length; x++) {\r\n\r\n        if (\"tags\" in currentCat[x]) {\r\n\r\n          if (currentCat[x].tags[0].toLowerCase() in tag) {\r\n            tag[currentCat[x].tags[0].toLowerCase()].push(currentCat[x])\r\n          }\r\n          else {\r\n            tag[currentCat[x].tags[0].toLowerCase()] = []\r\n            tag[currentCat[x].tags[0].toLowerCase()].push(currentCat[x])\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n    }\r\n\r\n    //currentCat = currentCat.orderBy([\"\"]\r\n    let tagLists = []\r\n\r\n    for (const [key, value] of Object.entries(tag)) {\r\n      tagLists.push(\r\n        <div>\r\n          <Divider orientation=\"left\" style={{ fontSize: \"180%\", color: \"#177ddc\" }}><u>{key}</u> ({value.length})</Divider>\r\n          <List\r\n            grid={{\r\n              xs: 1,\r\n              sm: 2,\r\n              md: 3,\r\n              lg: 4,\r\n              xl: 4,\r\n              xxl: 5,\r\n              gutter: 20\r\n            }}\r\n            dataSource={value}\r\n            key={key + \"cat\"}\r\n            locale={{\r\n              emptyText: (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                  <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                  <h1 style={{ fontSize: \"200%\" }}>Oops, no challenges have been created.</h1>\r\n                </div>\r\n              )\r\n            }}\r\n            renderItem={item => {\r\n              if (!(\"firstBlood\" in item)) {\r\n                item.firstBlood = \"No Solves Yet!\"\r\n              }\r\n\r\n\r\n              if (item.solved === false) {\r\n                return (\r\n                  <List.Item key={item.name}>\r\n                    <div id={item.name} onClick={() => { this.loadChallengeDetails(item.name, item.solved) }}>\r\n                      <Card\r\n                        hoverable\r\n                        type=\"inner\"\r\n                        bordered={true}\r\n                        bodyStyle={{ backgroundColor: \"#262626\" }}\r\n                        className=\"card-design\"\r\n                        style={{ overflow: \"hidden\" }}\r\n                      >\r\n                        <Meta\r\n                          description={\r\n                            <div style={{ display: \"flex\", justifyItems: \"center\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\" }}>\r\n                              <h1 style={{ textOverflow: \"ellipsis\", width: \"25ch\", fontSize: \"3ch\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}>{item.name}</h1>\r\n                              <h1 style={{ fontSize: \"185%\", color: \"#1765ad\", fontWeight: 700 }}>{item.points}</h1>\r\n                              <h1 style={{ color: \"#d32029\" }}><svg t=\"1591275807515\" className=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2225\" width=\"16\" height=\"16\"><path d=\"M512 0C430.3872 123.8016 153.6 458.4448 153.6 656.384 153.6 859.4432 314.0608 1024 512 1024S870.4 859.4432 870.4 656.384C870.4 458.4448 593.6128 123.8016 512 0zM224.3584 656.384c0-22.4256 17.2032-40.448 38.4-40.448s38.4 18.0224 38.4 40.448c0 59.392 23.4496 113.0496 61.3376 151.8592 38.0928 39.1168 90.9312 63.2832 149.504 63.2832 21.1968 0 38.4 18.1248 38.4 40.448A39.424 39.424 0 0 1 512 952.32a282.624 282.624 0 0 1-202.9568-86.4256A299.52 299.52 0 0 1 224.3584 656.384z\" p-id=\"2226\" fill=\"#d81e06\"></path></svg> {item.firstBlood}</h1>\r\n                              {this.state.loadingChallenge && this.state.currentChallenge === item.name && (\r\n                                <div style={{ width: \"100%\", height: \"100%\", backgroundColor: \"red\", zIndex: 1 }}>\r\n                                  <LoadingOutlined style={{ color: \"#177ddc\", fontSize: \"500%\", position: \"absolute\", zIndex: 1, left: \"40%\", top: \"30%\" }} />\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n\r\n\r\n                          }\r\n                        />\r\n                      </Card> {/*Pass entire datasource as prop*/}\r\n                    </div>\r\n                  </List.Item>\r\n                )\r\n              }\r\n              else {\r\n                return (\r\n                  <List.Item key={item.name}>\r\n                    <div id={item.name} onClick={() => { this.loadChallengeDetails(item.name, item.solved) }}>\r\n                      <Card\r\n                        hoverable\r\n                        type=\"inner\"\r\n                        bordered={true}\r\n                        bodyStyle={{ backgroundColor: \"#3c8618\" }}\r\n                        className=\"card-design\"\r\n                        style={{ overflow: \"hidden\" }}\r\n                      >\r\n                        <Meta\r\n                          description={\r\n                            <div style={{ display: \"flex\", justifyItems: \"center\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\" }}>\r\n                              <h1 style={{ textOverflow: \"ellipsis\", width: \"25ch\", fontSize: \"3ch\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}>{item.name}</h1>\r\n                              <h1 style={{ fontSize: \"185%\", color: \"#1765ad\", fontWeight: 700 }}>{item.points}</h1>\r\n                              <h1 style={{ color: \"#d32029\" }}><svg t=\"1591275807515\" className=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2225\" width=\"16\" height=\"16\"><path d=\"M512 0C430.3872 123.8016 153.6 458.4448 153.6 656.384 153.6 859.4432 314.0608 1024 512 1024S870.4 859.4432 870.4 656.384C870.4 458.4448 593.6128 123.8016 512 0zM224.3584 656.384c0-22.4256 17.2032-40.448 38.4-40.448s38.4 18.0224 38.4 40.448c0 59.392 23.4496 113.0496 61.3376 151.8592 38.0928 39.1168 90.9312 63.2832 149.504 63.2832 21.1968 0 38.4 18.1248 38.4 40.448A39.424 39.424 0 0 1 512 952.32a282.624 282.624 0 0 1-202.9568-86.4256A299.52 299.52 0 0 1 224.3584 656.384z\" p-id=\"2226\" fill=\"#d81e06\"></path></svg> {item.firstBlood}</h1>\r\n                              {this.state.loadingChallenge && this.state.currentChallenge === item.name && (\r\n                                <div style={{ width: \"100%\", height: \"100%\", backgroundColor: \"red\", zIndex: 1 }}>\r\n                                  <LoadingOutlined style={{ color: \"#177ddc\", fontSize: \"500%\", position: \"absolute\", zIndex: 1, left: \"40%\", top: \"30%\" }} />\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n\r\n                          }\r\n                        />\r\n                      </Card> {/*Pass entire datasource as prop*/}\r\n                    </div>\r\n                  </List.Item>\r\n                )\r\n              }\r\n            }\r\n            }\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    this.setState({ tagLists: tagLists, loadingTag: false })\r\n\r\n  }\r\n\r\n  handleHint(id, chall, bought) {\r\n    fetch(window.ipAddress + \"/v1/challenge/hint\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"id\": parseInt(id),\r\n        \"chall\": chall,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        if (bought === true) {\r\n          this.setState({ hintModal: true, hintContent: data.hint })\r\n        }\r\n        else {\r\n          message.success({ content: \"Purchashed hint \" + String(id + 1) + \" successfully!\" })\r\n          let challengeHints = this.state.challengeHints\r\n          challengeHints[id] = (\r\n            <Button type=\"primary\" key={\"hint\" + String(id)} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(id, chall, true) }}>Hint {id + 1} - Purchased</Button>\r\n          )\r\n          this.setState({ hintModal: true, hintContent: data.hint, challengeHints: challengeHints })\r\n        }\r\n\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n    })\r\n  }\r\n\r\n  loadChallengeDetails = async (name, solved) => {\r\n    await this.setState({ currentChallenge: name, loadingChallenge: true, currentChallengeSolved: solved, tagList: this.state.tagLists })\r\n    if (solved === true) {\r\n      this.setState({ currentChallengeStatus: \"Challenge already solved.\" })\r\n    }\r\n    else {\r\n      this.setState({ currentChallengeStatus: \"Enter the flag (case-sensitive)\" })\r\n    }\r\n    document.getElementById(name).style.pointerEvents = \"none\"\r\n    fetch(window.ipAddress + \"/v1/challenge/show/\" + encodeURIComponent(name), {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n\r\n      console.log(this.state.currentChallenge)\r\n      if (data.success === true) {\r\n\r\n        //Replace <code> with syntax highlighter\r\n        let description = data.chall.description\r\n        let position = description.search(\"<code>\")\r\n\r\n        if (position !== -1) {\r\n          let language = \"\"\r\n          let offset = 0\r\n          position += 6\r\n\r\n          while (true) {\r\n            let currentLetter = description.slice(position + offset, position + offset + 1)\r\n            if (currentLetter === \"\\n\") {\r\n              language = description.slice(position, position + offset)\r\n              description = description.slice(0, position) + description.slice(position + offset)\r\n              description = description.replace(\"<code>\", \"<SyntaxHighlighter language='\" + language + \"' style={atomDark}>{`\")\r\n              description = description.replace(\"</code>\", \"`}</SyntaxHighlighter>\")\r\n              data.chall.description = description\r\n              break\r\n            }\r\n            else if (offset > 10) {\r\n              break\r\n            }\r\n            offset += 1\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n        //Handle unlimited attempts\r\n        if (data.chall.max_attempts === 0) {\r\n          data.chall.max_attempts = \"Unlimited\"\r\n\r\n        }\r\n        else {\r\n          data.chall.max_attempts = String(data.chall.max_attempts - data.chall.used_attempts) + \"/\" + String(data.chall.max_attempts)\r\n        }\r\n\r\n        //Render tags\r\n        if (typeof data.chall.tags !== \"undefined\") {\r\n          const tag = data.chall.tags\r\n          var renderTags = []\r\n\r\n          for (let x = 0; x < tag.length; x++) {\r\n            renderTags.push(\r\n              <Tag color=\"#1765ad\" key={tag[x]}>\r\n                {tag[x]}\r\n              </Tag>\r\n            )\r\n          }\r\n        }\r\n\r\n\r\n        //Handle hints\r\n        if (typeof data.chall.hints !== \"undefined\") {\r\n          const hints = data.chall.hints\r\n          var renderHints = []\r\n\r\n          for (let y = 0; y < hints.length; y++) {\r\n            if (hints[y].bought === false) {\r\n              if (hints[y].cost === 0) {\r\n                hints[y].cost = \"Free\"\r\n              }\r\n              else {\r\n                hints[y].cost = String(hints[y].cost) + \" Points\"\r\n              }\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\" }} onClick={() => { this.handleHint(y, name, false) }}>Hint {y + 1} - {hints[y].cost}</Button>\r\n              )\r\n            }\r\n            else {\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(y, name, true) }}>Hint {y + 1} - Purchased</Button>\r\n              )\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n\r\n        this.setState({ viewingChallengeDetails: data.chall, challengeModal: true, challengeTags: renderTags, loadingChallenge: false, challengeHints: renderHints })\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n      document.getElementById(name).style.pointerEvents = \"auto\"\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  submitFlag(values) {\r\n\r\n    fetch(window.ipAddress + \"/v1/challenge/submit\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"flag\": values.flag,\r\n        \"chall\": this.state.currentChallenge,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        if (data.data === \"correct\") {\r\n          notification[\"success\"]({\r\n            message: 'Challenge Solved! Congratulations!',\r\n            description:\r\n              'Congratulations for solving \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n          const refresh = async () => {\r\n            await this.props.handleRefresh(true)\r\n            await this.sortByTags()\r\n\r\n          }\r\n          refresh()\r\n\r\n        }\r\n        else {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Incorrect Flag',\r\n            description:\r\n              'It seems like you submitted an incorrect flag (' + values.flag + ') for \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        if (data.error === \"exceeded\") {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Attempts Exhausted',\r\n            description:\r\n              'It seems like you have execeeded the maximum number of attempts for \"' + this.state.currentChallenge + '\". Contact an admin if you need more tries',\r\n            duration: 0\r\n          });\r\n        }\r\n        else {\r\n          message.error({ content: \"Oops. Unknown error\" })\r\n        }\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout className=\"pageTransition\" style={{ height: \"100%\", width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n\r\n        <Modal\r\n          title=\"Hint\"\r\n          visible={this.state.hintModal}\r\n          onCancel={() => { this.setState({ hintModal: false }) }}\r\n          footer={null}\r\n        >\r\n          <p>{this.state.hintContent}</p>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          title={null}\r\n          visible={this.state.challengeModal}\r\n          footer={null}\r\n          bodyStyle={{ textAlign: \"center\" }}\r\n          onCancel={() => { this.setState({ challengeModal: false }) }}\r\n        >\r\n          <Tabs defaultActiveKey=\"challenge\">\r\n            <TabPane\r\n              tab={<span><ProfileOutlined /> Challenge</span>}\r\n              key=\"challenge\"\r\n            >\r\n              <h1 style={{ fontSize: \"150%\" }}>{this.state.viewingChallengeDetails.name}</h1>\r\n              <div>\r\n                {this.state.challengeTags}\r\n              </div>\r\n              <h2 style={{ color: \"#1765ad\", marginTop: \"2vh\", marginBottom: \"6vh\", fontSize: \"200%\" }}>{this.state.viewingChallengeDetails.points}</h2>\r\n              <JsxParser\r\n                bindings={{\r\n                  atomDark: atomDark\r\n                }}\r\n                components={{ SyntaxHighlighter }}\r\n                jsx={this.state.viewingChallengeDetails.description}\r\n              />\r\n\r\n\r\n              <div style={{ marginTop: \"6vh\", display: \"flex\", flexDirection: \"column\" }}>\r\n                {this.state.challengeHints}\r\n              </div>\r\n\r\n\r\n              <div style={{ display: \"flex\" }}>\r\n                <SubmitFlagForm submitFlag={this.submitFlag.bind(this)} currentChallengeStatus={this.state.currentChallengeStatus} currentChallengeSolved={this.state.currentChallengeSolved}></SubmitFlagForm>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: \"-1vh\" }}>\r\n                <p>Challenge Author: <em>{this.state.viewingChallengeDetails.author}</em></p>\r\n                <p style={{ color: \"#d87a16\", fontWeight: 500 }}>Attempts Remaining: {this.state.viewingChallengeDetails.max_attempts}</p>\r\n              </div>\r\n            </TabPane>\r\n            <TabPane\r\n              tab={<span><UnlockOutlined /> Solves ({this.state.viewingChallengeDetails.solves.length}) </span>}\r\n              key=\"solves\"\r\n            >\r\n              <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={this.state.viewingChallengeDetails.solves}\r\n                locale={{\r\n                  emptyText: (\r\n                    <div>\r\n                      <SmileOutlined style={{ fontSize: \"500%\" }} />\r\n                      <br />\r\n                      <br />\r\n                      <p style={{ fontSize: \"150%\" }}>No solves yet. Maybe you can be the first!</p>\r\n                    </div>\r\n                  )\r\n                }}\r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item}>\r\n                      <List.Item.Meta\r\n                        avatar={<Avatar src=\"https://www.todayifoundout.com/wp-content/uploads/2017/11/rick-astley.png\" />}\r\n                        title={item}\r\n                      />\r\n                    </List.Item>\r\n                  )\r\n                }\r\n                } />\r\n            </TabPane>\r\n          </Tabs>\r\n\r\n\r\n        </Modal>\r\n        {!this.state.loadingTag && (\r\n          <div>\r\n            {this.state.tagLists}\r\n          </div>\r\n        )}\r\n        {this.state.loadingTag && (\r\n          <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n            <Ellipsis color=\"#177ddc\" size={110}></Ellipsis>\r\n          </div>\r\n        )}\r\n\r\n\r\n      </Layout>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChallengesTagSort;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminUsers.js",["104","105"],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminSubmissions.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallenges.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeCreate.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeEdit.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":27,"column":9,"nodeType":"112","messageId":"113","endLine":27,"endColumn":15},{"ruleId":"110","severity":1,"message":"114","line":2,"column":18,"nodeType":"112","messageId":"113","endLine":2,"endColumn":22},{"ruleId":"110","severity":1,"message":"115","line":2,"column":24,"nodeType":"112","messageId":"113","endLine":2,"endColumn":34},{"ruleId":"110","severity":1,"message":"116","line":4,"column":3,"nodeType":"112","messageId":"113","endLine":4,"endColumn":14},{"ruleId":"110","severity":1,"message":"117","line":5,"column":3,"nodeType":"112","messageId":"113","endLine":5,"endColumn":14},{"ruleId":"110","severity":1,"message":"118","line":6,"column":3,"nodeType":"112","messageId":"113","endLine":6,"endColumn":14},{"ruleId":"110","severity":1,"message":"119","line":7,"column":3,"nodeType":"112","messageId":"113","endLine":7,"endColumn":22},{"ruleId":"110","severity":1,"message":"120","line":8,"column":3,"nodeType":"112","messageId":"113","endLine":8,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":195,"column":311,"nodeType":"123","endLine":195,"endColumn":323},{"ruleId":"124","severity":1,"message":"125","line":281,"column":58,"nodeType":"126","endLine":281,"endColumn":107},{"ruleId":"127","severity":1,"message":"128","line":265,"column":35,"nodeType":"129","messageId":"130","endLine":265,"endColumn":37},{"ruleId":"131","severity":1,"message":"132","line":127,"column":29,"nodeType":"126","endLine":127,"endColumn":106},{"ruleId":"124","severity":1,"message":"133","line":161,"column":41,"nodeType":"126","endLine":161,"endColumn":82},{"ruleId":"124","severity":1,"message":"133","line":166,"column":44,"nodeType":"126","endLine":166,"endColumn":125},{"ruleId":"124","severity":1,"message":"133","line":235,"column":69,"nodeType":"126","endLine":235,"endColumn":149},{"ruleId":"110","severity":1,"message":"134","line":16,"column":10,"nodeType":"112","messageId":"113","endLine":16,"endColumn":17},{"ruleId":"110","severity":1,"message":"135","line":96,"column":22,"nodeType":"112","messageId":"113","endLine":96,"endColumn":27},{"ruleId":"110","severity":1,"message":"136","line":2,"column":86,"nodeType":"112","messageId":"113","endLine":2,"endColumn":93},{"ruleId":"124","severity":1,"message":"125","line":296,"column":74,"nodeType":"126","endLine":296,"endColumn":123},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Header' is assigned a value but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'Breadcrumb' is defined but never used.","'FlagTwoTone' is defined but never used.","'HomeTwoTone' is defined but never used.","'FundTwoTone' is defined but never used.","'NotificationTwoTone' is defined but never used.","'SmileTwoTone' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'orderBy' is defined but never used.","'value' is assigned a value but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation"]