[{"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\index.js":"1","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\serviceWorker.js":"2","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\App.js":"3","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\home.js":"4","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challenges.js":"5","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\Scoreboard.js":"6","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\profile.js":"7","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\admin.js":"8","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\announcements.js":"9","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\oops.js":"10","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\login.js":"11","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\userChallengeCreate.js":"12","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesCategory.js":"13","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSort.js":"14","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminUsers.js":"15","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminSubmissions.js":"16","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallenges.js":"17","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeCreate.js":"18","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeEdit.js":"19","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSortList.js":"20"},{"size":616,"mtime":1607510796935,"results":"21","hashOfConfig":"22"},{"size":5227,"mtime":1607510796968,"results":"23","hashOfConfig":"22"},{"size":15170,"mtime":1620963471415,"results":"24","hashOfConfig":"22"},{"size":1797,"mtime":1617289391716,"results":"25","hashOfConfig":"22"},{"size":13382,"mtime":1620902980046,"results":"26","hashOfConfig":"22"},{"size":15000,"mtime":1620876554504,"results":"27","hashOfConfig":"22"},{"size":19545,"mtime":1620903480834,"results":"28","hashOfConfig":"22"},{"size":5082,"mtime":1620963610780,"results":"29","hashOfConfig":"22"},{"size":798,"mtime":1609486545452,"results":"30","hashOfConfig":"31"},{"size":877,"mtime":1607510796969,"results":"32","hashOfConfig":"22"},{"size":12510,"mtime":1620903415011,"results":"33","hashOfConfig":"22"},{"size":25476,"mtime":1620964626703,"results":"34","hashOfConfig":"22"},{"size":23040,"mtime":1620912237884,"results":"35","hashOfConfig":"22"},{"size":16721,"mtime":1617373682097,"results":"36","hashOfConfig":"22"},{"size":14611,"mtime":1620903415011,"results":"37","hashOfConfig":"22"},{"size":3834,"mtime":1620876072988,"results":"38","hashOfConfig":"22"},{"size":14102,"mtime":1620959356758,"results":"39","hashOfConfig":"22"},{"size":25713,"mtime":1620960277888,"results":"40","hashOfConfig":"22"},{"size":28007,"mtime":1620960383004,"results":"41","hashOfConfig":"22"},{"size":8134,"mtime":1609859905730,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1tpresw",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qwtoaq",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\index.js",[],["90","91"],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\serviceWorker.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\App.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\home.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challenges.js",["92"],"import React from 'react';\r\nimport { Layout, Card, List, Progress, message, Button, Radio, Select } from 'antd';\r\nimport {\r\n  FileUnknownTwoTone,\r\n  LeftCircleOutlined,\r\n  AppstoreOutlined,\r\n  TagsOutlined\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\nimport ChallengesCategory from \"./challengesCategory.js\";\r\nimport ChallengesTagSort from \"./challengesTagSort.js\";\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { Transition, animated } from 'react-spring/renderprops';\r\n\r\nconst { Meta } = Card;\r\nconst { Option } = Select;\r\n\r\nconst categoryImages = [require(\"./assets/catPhoto1.jpg\").default, require(\"./assets/catPhoto2.jpg\").default, require(\"./assets/catPhoto3.jpg\").default]\r\n\r\n\r\n\r\nvar i = -1\r\n\r\nclass Challenges extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.child = React.createRef();\r\n\r\n    this.state = {\r\n      categories: [],\r\n      challengeCategory: false,\r\n      currentCategory: false,\r\n      originalData: [],\r\n      tagData: [],\r\n      sortByTags: false,\r\n      loadingChall: false,\r\n      RadioValue: \"Category\",\r\n      currentCategoryChallenges: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ loadingChall: true })\r\n\r\n    this.fetchCategories()\r\n  }\r\n\r\n  parseCategories(data) {\r\n    for (let x = 0; x < data.length; x++) {\r\n      let currentCategory = data[x].challenges\r\n      let solvedStats = {\r\n        challenges: currentCategory.length,\r\n        solved: 0,\r\n        percentage: 0\r\n      }\r\n\r\n      for (let y = 0; y < currentCategory.length; y++) {\r\n        if (currentCategory[y].solved === true) {\r\n          solvedStats.solved += 1\r\n        }\r\n      }\r\n\r\n      solvedStats.percentage = Math.round((solvedStats.solved / solvedStats.challenges) * 100)\r\n      data[x].challenges = solvedStats\r\n    }\r\n\r\n    return data;\r\n\r\n  }\r\n\r\n  fetchCategories = async () => {\r\n    await fetch(window.ipAddress + \"/v1/challenge/list\", {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then(async (data) => {\r\n      if (data.success === true) {\r\n\r\n        let originalData = JSON.parse(JSON.stringify(data.challenges))\r\n        const newData = await this.parseCategories(data.challenges) //this statement changes the object data\r\n\r\n        //convert array to dict\r\n\r\n        let originalDataDictionary = {}\r\n        for (let i = 0; i < originalData.length; i++) {\r\n          originalDataDictionary[originalData[i]._id] = originalData[i].challenges\r\n        }\r\n\r\n        await this.setState({ categories: newData, originalData: originalDataDictionary, loadingChall: false })\r\n\r\n        const category = this.props.match.params.category;\r\n        if (typeof category !== \"undefined\") {\r\n          await this.setState({ challengeCategory: true, currentCategory: decodeURIComponent(category), currentCategoryChallenges: this.state.originalData[decodeURIComponent(category)] })\r\n          this.sortDifferent({ target: { value: \"Type\" } })\r\n        }\r\n\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  sortCats(value) {\r\n    this.child.current.sortCats(value)\r\n  }\r\n\r\n  sortDifferent(value) {\r\n    this.setState({ RadioValue: value.target.value })\r\n    if (value.target.value === \"Type\" && !this.state.sortByTags) {\r\n\r\n      if (this.state.currentCategory) { //currentCategory is whether a category has been set, challengeCategory is for the visibility of the component\r\n        let originalData = this.state.originalData\r\n        //Since the category is not the key, we will need to loop through the list to find the category\r\n        this.setState({ tagData: [originalData[this.state.currentCategory]], sortByTags: true, challengeCategory: false })\r\n\r\n      }\r\n      else {\r\n        this.setState({ sortByTags: true, tagData: this.state.originalData })\r\n      }\r\n\r\n    }\r\n    else if (this.state.sortByTags && value.target.value === \"Category\") {\r\n\r\n      if (this.state.currentCategory) {\r\n        this.setState({ sortByTags: false, challengeCategory: true })\r\n      }\r\n      else {\r\n        this.setState({ sortByTags: false })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  handleRefresh = async (tagSorting) => {\r\n\r\n    await this.fetchCategories()\r\n    if (tagSorting) {\r\n      await this.sortDifferent({ target: { value: \"Type\" } })\r\n    }\r\n    else {\r\n      await this.setState({ currentCategoryChallenges: this.state.originalData[this.state.currentCategory] })\r\n    }\r\n\r\n    await this.props.obtainScore()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <animated.div style={{ ...this.props.transition, height: \"95vh\", overflowY: \"auto\", backgroundColor: \"rgba(0, 0, 0, 0.7)\", border: \"5px solid transparent\", borderRadius: \"20px\" }}>\r\n        <Layout style={{ minHeight: \"95vh\", margin: \"20px\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n          <div id=\"Header\" style={{ positon: \"relative\", width: \"100%\", height: \"40vh\", textAlign: \"center\", borderStyle: \"solid\", borderWidth: \"0px 0px 3px 0px\", borderColor: \"#1890ff\", lineHeight: \"1.1\", marginBottom: \"1.5vh\", backgroundColor: \"rgba(0, 0, 0, 1)\" }}>\r\n            <img alt=\"Banner\" style={{ width: \"100%\", height: \"100%\", opacity: 0.6 }} src={require(\"./assets/challenges_bg.jpg\").default} />\r\n\r\n            {!this.state.currentCategory && (\r\n              <h1 style={{\r\n                color: \"white\",\r\n                position: \"relative\",\r\n                bottom: \"60%\",\r\n                fontSize: \"250%\",\r\n                letterSpacing: \".3rem\",\r\n                backgroundColor: \"#164c7e\",\r\n                paddingTop: \"10px\",\r\n                paddingBottom: \"10px\",\r\n                fontWeight: 300\r\n              }}> CHALLENGES\r\n              </h1>\r\n            )}\r\n\r\n            {this.state.currentCategory && (\r\n              <h1 style={{\r\n                color: \"white\",\r\n                position: \"relative\",\r\n                bottom: \"70%\",\r\n                fontSize: \"140%\",\r\n                letterSpacing: \".3rem\",\r\n                backgroundColor: \"#164c7e\",\r\n                paddingTop: \"10px\",\r\n                fontWeight: 300\r\n              }}> CHALLENGES <p style={{ fontSize: \"210%\", letterSpacing: \"normal\", paddingBottom: \"10px\", fontWeight: 400 }}>{this.state.currentCategory}</p></h1>\r\n\r\n            )}\r\n\r\n\r\n          </div>\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignContent: \"center\", marginBottom: \"3vh\" }}>\r\n\r\n            <Button size=\"large\" disabled={!this.state.currentCategory} icon={<LeftCircleOutlined />} style={{ backgroundColor: \"#1f1f1f\" }} onClick={() => { this.props.history.push(\"/Challenges\"); this.setState({ challengeCategory: false, currentCategory: false, sortByTags: false, RadioValue: \"Category\" }) }} size=\"large\">Back</Button>\r\n            <div>\r\n              <Select disabled={!(this.state.currentCategory && !this.state.sortByTags)} defaultValue=\"points\" style={{ marginRight: \"1.5vw\", width: \"20ch\", backgroundColor: \"#1f1f1f\" }} onChange={this.sortCats.bind(this)}>\r\n                <Option value=\"points\">Sort by Points</Option>\r\n                <Option value=\"abc\">Sort A→Z</Option>\r\n                <Option value=\"abcrev\">Sort Z→A</Option>\r\n              </Select>\r\n              <Radio.Group buttonStyle=\"solid\" size=\"large\" onChange={this.sortDifferent.bind(this)} value={this.state.RadioValue} style={{ backgroundColor: \"#1f1f1f\" }}>\r\n                <Radio.Button value=\"Category\">Sort By Category <AppstoreOutlined /> </Radio.Button>\r\n                <Radio.Button value=\"Type\">Sort By Tag <TagsOutlined /> </Radio.Button>\r\n              </Radio.Group>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div>\r\n            <Transition\r\n              items={this.state.loadingChall}\r\n              from={{ opacity: 0 }}\r\n              enter={{ opacity: 1 }}\r\n              leave={{ opacity: 0 }}>\r\n              {toggle => (\r\n                props => {\r\n                  if (toggle === true) {\r\n                    return (<div style={{ ...props, position: \"absolute\", left: \"50%\", transform: \"translate(-50%, 0%)\", zIndex: 10 }}>\r\n                      <Ellipsis color=\"#177ddc\" size={120} ></Ellipsis>\r\n                    </div>)\r\n                  }\r\n                  else {\r\n                    return (<div style={{ ...props }}>\r\n                      {!this.state.challengeCategory && !this.state.sortByTags && (\r\n                        <List\r\n                          grid={{\r\n                            xs: 1,\r\n                            sm: 1,\r\n                            md: 2,\r\n                            lg: 3,\r\n                            xl: 3,\r\n                            xxl: 4,\r\n                            gutter: 20\r\n                          }}\r\n                          dataSource={this.state.categories}\r\n                          locale={{\r\n                            emptyText: (\r\n                              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                                <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                                <h1 style={{ fontSize: \"200%\" }}>Oops, no challenges have been created.</h1>\r\n                              </div>\r\n                            )\r\n                          }}\r\n                          renderItem={item => {\r\n                            i = 0\r\n\r\n                            return (\r\n                              <List.Item key={item._id}>\r\n                                <Link to={\"/Challenges/\" + item._id}>\r\n                                  <div onClick={async () => {\r\n                                    await this.setState({ currentCategory: item._id, currentSolvedStatus: item.challenges, currentCategoryChallenges: this.state.originalData[item._id] });\r\n                                    this.sortDifferent({ target: { value: \"Type\" } })\r\n                                  }}>\r\n                                    <Card\r\n                                      hoverable\r\n                                      type=\"inner\"\r\n                                      bordered={true}\r\n                                      bodyStyle={{ backgroundColor: \"#262626\" }}\r\n                                      className=\"card-design\"\r\n                                      style={{ overflow: \"hidden\" }}\r\n                                      cover={<img style={{ height: \"35ch\", width: \"55ch\", overflow: \"hidden\" }} alt=\"Category Card\" src={categoryImages[i]} />}\r\n                                    >\r\n                                      <Meta\r\n                                        title={\r\n                                          <div id=\"Title\" style={{ display: \"flex\", color: \"#f5f5f5\", flexDirection: \"row\", alignContent: \"center\", alignItems: \"center\" }}>\r\n                                            <h1 style={{ color: \"white\", fontSize: \"2.5ch\", width: \"40ch\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>{item._id}</h1>\r\n                                            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\" }}>\r\n                                              <h2 style={{ fontSize: \"2.5ch\", marginLeft: \"1vw\", color: \"#faad14\", fontWeight: 700 }}>{item.challenges.solved}/{item.challenges.challenges}</h2>\r\n                                              <Progress type=\"circle\" percent={item.challenges.percentage} width=\"7ch\" strokeColor={{\r\n                                                '0%': '#177ddc',\r\n                                                '100%': '#49aa19',\r\n                                              }} style={{ marginLeft: \"1vw\", fontSize: \"2ch\" }} />\r\n                                            </div>\r\n                                          </div>\r\n                                        }\r\n                                      />\r\n                                    </Card> {/*Pass entire datasource as prop*/}\r\n                                  </div>\r\n                                </Link>\r\n                              </ List.Item>\r\n                            )\r\n                          }\r\n                          }\r\n                        />\r\n                      )}\r\n\r\n                      {this.state.challengeCategory && (\r\n                        <ChallengesCategory handleRefresh={this.handleRefresh.bind(this)} ref={this.child} currentCategoryChallenges={this.state.currentCategoryChallenges} category={this.state.currentCategory}></ChallengesCategory>\r\n                      )}\r\n\r\n                      {this.state.sortByTags && (\r\n                        <ChallengesTagSort tagData={this.state.tagData} handleRefresh={this.handleRefresh.bind(this)}></ChallengesTagSort>\r\n                      )}\r\n                    </div>)\r\n                  }\r\n\r\n\r\n                }\r\n              )\r\n              }\r\n            </Transition>\r\n          </div>\r\n        </Layout>\r\n      </animated.div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Challenges;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\Scoreboard.js",["93"],"import React from 'react';\r\nimport { Layout, message, Table } from 'antd';\r\nimport {\r\n  FileUnknownTwoTone\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { orderBy } from \"lodash\";\r\nimport { AreaChart, Area, Tooltip, XAxis, YAxis, CartesianGrid, Label, ResponsiveContainer } from \"recharts\";\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { animated } from 'react-spring/renderprops';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { Column } = Table;\r\n\r\n\r\nclass Scoreboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      scores: [],\r\n      graphData: [{ \"\": 0 }],\r\n      top10: [\"\"] * 10,\r\n      loadingGraph: false,\r\n      loadingTable: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFinalScores()\r\n  }\r\n\r\n  getFinalScores() {\r\n    this.setState({ loadingGraph: true, loadingTable: true })\r\n    fetch(window.ipAddress + \"/v1/scores\", {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      let top10 = []\r\n      let top10names = []\r\n      let top10scores = {}\r\n\r\n\r\n      if (data.success === true) {\r\n        let scoreArray = orderBy(data.scores, [\"score\"], [\"desc\"])\r\n        for (let i = 0; i < scoreArray.length; i++) {\r\n\r\n          if (i < 10) {\r\n            top10[scoreArray[i].username] = \"\"\r\n            top10names.push(scoreArray[i].username)\r\n            top10scores[scoreArray[i].username] = scoreArray[i].score\r\n          }\r\n\r\n        }\r\n\r\n        const waitalittle = async () => {\r\n          await this.setState({ top10: top10names })\r\n          this.plotGraph(top10, top10scores, scoreArray)\r\n        }\r\n        waitalittle()\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n\r\n\r\n    }).catch((error) => {\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  plotGraph(top10, top10scores, scoreArray) {\r\n    fetch(window.ipAddress + \"/v1/scoreboard\", {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      let formattedData = []\r\n      let finalPoint = {}\r\n\r\n      let timestamp = {}\r\n\r\n      if (data.success === true) {\r\n        finalPoint = top10scores\r\n        finalPoint[\"Time\"] = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Singapore\" })\r\n\r\n        for (let i = 0; i < data.users.length; i++) {\r\n          let currentPoint = {}\r\n\r\n          if (data.users[i]._id in top10) {\r\n            let scores = data.users[i].changes\r\n            let pointsSoFar = 0\r\n\r\n            for (let x = 0; x < scores.length; x++) {\r\n\r\n              pointsSoFar += scores[x].points\r\n              currentPoint[\"name\"] = data.users[i]._id\r\n              currentPoint[\"points\"] = pointsSoFar\r\n              currentPoint[\"Time\"] = scores[x].timestamp\r\n              formattedData.push(Object.assign({}, currentPoint))\r\n            }\r\n\r\n          }\r\n\r\n          //Process timestamps\r\n          let scores2 = data.users[i].changes\r\n          console.log(scores2)\r\n\r\n          for (let x = 0; x < scores2.length; x++) {\r\n            if (data.users[i]._id in timestamp) {\r\n\r\n              let d1 = new Date(timestamp[data.users[i]._id])\r\n              let d2 = new Date(scores2[x].timestamp)\r\n              if (d1 < d2 && scores2[x].points > 0) {\r\n                timestamp[data.users[i]._id] = scores2[x].timestamp\r\n              }\r\n            }\r\n            else {\r\n              timestamp[data.users[i]._id] = scores2[x].timestamp\r\n            }\r\n          }\r\n\r\n\r\n        }\r\n\r\n        //console.log(timestamp)\r\n        // More processing & sort by timestamp\r\n        for (let x = 0; x < scoreArray.length; x++) {\r\n          if (scoreArray[x].username in timestamp) {\r\n            scoreArray[x].timestamp = timestamp[scoreArray[x].username]\r\n          }\r\n          else {\r\n            scoreArray[x].timestamp = \"0\"\r\n          }\r\n        }\r\n        scoreArray = orderBy(scoreArray, [\"score\", \"timestamp\"], [\"desc\", \"asc\"])\r\n        for (let x = 0; x < scoreArray.length; x++) {\r\n\r\n          if (\"timestamp\" in scoreArray[x] && scoreArray[x].timestamp !== \"0\") {\r\n            console.log(scoreArray[x])\r\n            scoreArray[x].position = String(x + 1) + \".\"\r\n            const dateTime = Math.abs(new Date() - new Date(scoreArray[x].timestamp)) / 1000 //no. of seconds since the challenge was completed/hint bought\r\n            let minutes = Math.ceil(dateTime / 60)\r\n            let hours = 0\r\n            let days = 0\r\n            let months = 0\r\n            let years = 0\r\n            if (minutes >= 60) {\r\n              hours = Math.floor(minutes / 60)\r\n              minutes = minutes - hours * 60\r\n\r\n              if (hours >= 24) {\r\n                days = Math.floor(hours / 24)\r\n                hours = hours - days * 24\r\n\r\n                if (days >= 30) {\r\n                  months = Math.floor(days / 30)\r\n                  days = days - months * 30\r\n\r\n                  if (months >= 12) {\r\n                    years = Math.floor(months / 12)\r\n                    months = months - years * 12\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            let finalTime = \" ago.\"\r\n            if (minutes !== 0) {\r\n              finalTime = minutes.toString() + \" minutes \" + finalTime\r\n            }\r\n            if (hours !== 0) {\r\n              finalTime = hours.toString() + \" hours \" + finalTime\r\n            }\r\n            if (days !== 0) {\r\n              finalTime = days.toString() + \" days \" + finalTime\r\n            }\r\n            if (months !== 0) {\r\n              finalTime = months.toString() + \" months \" + finalTime\r\n            }\r\n            if (years !== 0) {\r\n              finalTime = years.toString() + \" years \" + finalTime\r\n            }\r\n            scoreArray[x].timestamp = finalTime\r\n          }\r\n          else {\r\n            scoreArray[x].timestamp = \"No solves yet\"\r\n          }\r\n        }\r\n\r\n\r\n        formattedData = orderBy(formattedData, [\"Time\"], [\"asc\"])\r\n        //console.log(formattedData)\r\n        let pointDict = {}\r\n        let finalData = []\r\n\r\n        for (let i = 0; i < formattedData.length; i++) {\r\n\r\n          pointDict[formattedData[i].name] = formattedData[i].points\r\n          pointDict[\"Time\"] = new Date(formattedData[i].Time).toLocaleString(\"en-US\", { timeZone: \"Asia/Singapore\" })\r\n\r\n          let copy = Object.assign({}, pointDict)\r\n\r\n          finalData.push(copy)\r\n        }\r\n\r\n        finalData.push(finalPoint)\r\n        //console.log(finalData)\r\n        //Temp fix for table data to use timestamp\r\n        this.setState({ graphData: finalData, loadingGraph: false, scores: scoreArray, loadingTable: false })\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <animated.div style={{ ...this.props.transition, height: \"95vh\", overflowY: \"auto\", backgroundColor: \"rgba(0, 0, 0, 0.7)\", border: \"5px solid transparent\", borderRadius: \"20px\" }}>\r\n        <Layout style={{ margin: \"20px\", backgroundColor: \"rgba(0, 0, 0, 0)\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyItems: \"center\" }}>\r\n          <div>\r\n            <h1 style={{ fontSize: \"5ch\" }}>Scoreboard</h1>\r\n          </div>\r\n          <div style={{ height: 375, width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0.3)\", border: \"5px solid transparent\", borderRadius: \"20px\", padding: \"10px\", margin: \"10px\" }}>\r\n            <ResponsiveContainer width=\"90%\" height={350} debounce={200}>\r\n              <AreaChart height={350} data={this.state.graphData}\r\n\r\n                margin={{ top: 10, right: 15, left: 15, bottom: 15 }}>\r\n\r\n                <defs>\r\n                  <linearGradient id=\"color1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#791a1f\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#f89f9a\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#7c4a15\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#f8cf8d\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color3\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#7c5914\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#f8df8b\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color4\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#536d13\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#e4f88b\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color5\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#306317\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#b2e58b\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color6\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#146262\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#84e2d8\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color7\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#164c7e\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#8dcff8\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color8\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#203175\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#a8c1f8\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color9\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#3e2069\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#cda8f0\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                  <linearGradient id=\"color10\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"5%\" stopColor=\"#75204f\" stopOpacity={0.3} />\r\n                    <stop offset=\"95%\" stopColor=\"#f8a8cc\" stopOpacity={0.1} />\r\n                  </linearGradient>\r\n                </defs>\r\n                <XAxis dataKey=\"Time\">\r\n                  <Label offset={-5} position=\"insideBottom\" style={{ fill: 'rgba(207, 207, 207, 1)' }}>\r\n                    Time\r\n                                </Label>\r\n                </XAxis>\r\n                <YAxis >\r\n                  <Label offset={-10} position='insideLeft' style={{ fill: 'rgba(207, 207, 207, 1)' }}>\r\n                    Score\r\n                                </Label>\r\n                </YAxis>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n\r\n                <Tooltip labelStyle={{ backgroundColor: \"#1c2b3e\" }} contentStyle={{ backgroundColor: \"#1c2b3e\" }} wrapperStyle={{ backgroundColor: \"#1c2b3e\" }} />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[0]} stroke=\"#d32029\" fillOpacity={1} fill=\"url(#color1)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[1]} stroke=\"#d87a16\" fillOpacity={1} fill=\"url(#color2)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[2]} stroke=\"#d89614\" fillOpacity={1} fill=\"url(#color3)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[3]} stroke=\"#8bbb11\" fillOpacity={1} fill=\"url(#color4)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[4]} stroke=\"#49aa19\" fillOpacity={1} fill=\"url(#color5)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[5]} stroke=\"#13a8a8\" fillOpacity={1} fill=\"url(#color6)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[6]} stroke=\"#177ddc\" fillOpacity={1} fill=\"url(#color7)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[7]} stroke=\"#2b4acb\" fillOpacity={1} fill=\"url(#color8)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[8]} stroke=\"#642ab5\" fillOpacity={1} fill=\"url(#color9)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey={this.state.top10[9]} stroke=\"#cb2b83\" fillOpacity={1} fill=\"url(#color10)\" />\r\n                <Area isAnimationActive={false} type=\"monotone\" dataKey=\"Hi\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorPv)\" />\r\n              </AreaChart>\r\n            </ResponsiveContainer>\r\n            {this.state.loadingGraph && (\r\n              <div style={{ position: \"absolute\", left: \"47%\", transform: \"translate(-47%, 0%)\", zIndex: 10 }}>\r\n                <Ellipsis color=\"#177ddc\" size={120} ></Ellipsis>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {!this.state.loadingTable && (\r\n            <div style={{ height: \"70%\", width: \"100%\", minWidth: \"70vw\" }}>\r\n              <Table style={{ marginTop: \"2vh\" }} dataSource={this.state.scores} pagination={{ pageSize: 20 }} locale={{\r\n                emptyText: (\r\n                  <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                    <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                    <h1 style={{ fontSize: \"200%\" }}>That's odd. There are no users created yet.</h1>\r\n                  </div>\r\n                )\r\n              }}>\r\n                <Column title=\"Position\" dataIndex=\"position\" key=\"position\" />\r\n                <Column title=\"Username\" dataIndex=\"username\" key=\"username\"\r\n                  render={(text, row, index) => {\r\n                    return <Link to={\"/Profile/\" + text}><a style={{ fontSize: \"110%\", fontWeight: 700 }}>{text}</a></Link>;\r\n                  }}\r\n                />\r\n                <Column title=\"Score\" dataIndex=\"score\" key=\"score\" />\r\n                <Column title=\"Last Solve\" dataIndex=\"timestamp\" key=\"timestamp\" />\r\n              </Table>\r\n            </div>\r\n          )}\r\n        </Layout>\r\n      </animated.div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scoreboard;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\profile.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\admin.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\announcements.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\oops.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\login.js",["94","95","96","97"],"import React from 'react';\r\nimport { Input, Button, Icon, Layout, Form, Checkbox, message } from 'antd';\r\nimport {\r\n    UserOutlined,\r\n    LockOutlined,\r\n    MailOutlined\r\n} from '@ant-design/icons';\r\n\r\nconst { Content } = Layout\r\n\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            failedLogin: false,\r\n            errorFetch: false,\r\n            login: true,\r\n            register: false,\r\n            loading: false,\r\n        };\r\n    }\r\n\r\n    handleRegister = values => {\r\n        this.setState({ loading: true })\r\n        fetch(window.ipAddress + \"/v1/account/create\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"username\": values.username,\r\n                \"password\": values.password,\r\n                \"email\": values.email\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n            if (data.success === true) {\r\n                message.success({ content: \"Woohoo! Successfully registered, you can now login via the login screen!\" })\r\n\r\n            }\r\n            else if (data.error === \"email-taken\") {\r\n                message.warn({ content: \"Oops. Email already taken\" })\r\n            }\r\n            else if (data.error === \"username-taken\") {\r\n                message.warn({ content: \"Oops. Username already taken\" })\r\n            }\r\n            else if (data.error === \"email-formatting\") {\r\n                message.error({ content: \"Oops. Your email has not been registered for Sieberrsec CTF yet, please register using the form.\"})\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n\r\n            this.setState({ loading: false })\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n            this.setState({ loading: false })\r\n        })\r\n    }\r\n\r\n    handleLogin = values => {\r\n        this.setState({ loading: true })\r\n        fetch(window.ipAddress + \"/v1/account/login\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"username\": values.username,\r\n                \"password\": values.password,\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n\r\n            const login = async () => {\r\n                if (data.success === true) {\r\n                    await this.props.handleLogin(data.token, data.permissions, values.remember)\r\n                }\r\n                else {\r\n\r\n                    if (data.error === \"wrong-username\") {\r\n                        message.error({ content: \"Oops. Username does not exist\" })\r\n                    }\r\n                    else if (data.error === \"wrong-password\") {\r\n                        message.error({ content: \"Oops. Incorrect password\" })\r\n                    }\r\n                    else {\r\n                        message.error({ content: \"Oops. Unknown error\" })\r\n                    }\r\n\r\n                }\r\n                this.setState({ loading: false })\r\n            }\r\n            login()\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting to the server\" })\r\n            this.setState({ loading: false })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Layout style={{ maxWidth: \"100vw\", maxHeight: \"100vh\", overflow: \"hidden\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n                <Content style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", backgroundColor: \"rgba(0, 0, 0, 0)\", backgroundImage: \"url(\" + require(\"./assets/mainBG.png\").default + \")\" }}>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\", justifyContent: \"center\", height: \"100vh\", width: \"70vw\", backgroundSize: \"cover\", overflow: `hidden` }}>\r\n                        <div style={{ fontSize: \"7ch\", color: \"#595959\" }}>\r\n                            <span style={{ fontWeight: \"500\", textShadow: '1px -1px 1px -1px #000000' }}>Sieberrsec Training Platform</span>\r\n                        </div>\r\n                        <div style={{ color: \"#595959\", fontSize: \"5ch\" }}>\r\n                            <p style={{ textShadow: '1px 1px 1px 1px #000000' }}>The Wheel. Reinvented.™</p>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", backgroundColor: \"rgba(0, 0, 0, 0.8)\", alignItems: \"center\", justifyContent: \"center\", height: \"100vh\", width: \"30vw\", minWidth: \"65ch\", boxShadow: \"-5px 0px 20px black\" }}>\r\n                        <div style={{ padding: \"15px\", marginBottom: \"5vh\" }}>\r\n                            <img src={require(\"./sieberrsec_ctf.svg\").default} style={{ width: \"100%\" }}></img>\r\n                        </div>\r\n                        {this.state.login && (\r\n                            <div>\r\n                                <h1 style={{ color: \"white\", fontSize: \"3ch\" }}>Sign In <Icon type=\"unlock\" theme=\"twoTone\" /> </h1>\r\n                                <Form\r\n                                    name=\"normal_login\"\r\n                                    className=\"login-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={this.handleLogin}\r\n                                    style={{ width: \"60ch\" }}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Please enter your username.' }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: 'Please enter your password.' }]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            allowClear\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                                            <Checkbox>Remember me</Checkbox>\r\n                                        </Form.Item>\r\n\r\n                                        <a className=\"login-form-forgot\" href=\"\">Forgot password</a>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item>\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ marginRight: \"1vw\" }} loading={this.state.loading}>Log in</Button>\r\n                                        Or <a href=\"#\" onClick={() => { this.setState({ login: false, register: true }) }} >Register now!</a>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                        {this.state.register && (\r\n                            <div>\r\n                                <h1 style={{ color: \"white\", fontSize: \"2vw\" }}>Register an Account <Icon type=\"unlock\" theme=\"twoTone\" /> </h1>\r\n                                <Form\r\n                                    name=\"register_form\"\r\n                                    className=\"register-form\"\r\n                                    onFinish={this.handleRegister}\r\n                                    style={{ width: \"60ch\" }}\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Please enter a username' }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Enter a new username\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        rules={[{ required: true, message: 'Please enter an email' },\r\n                                        {\r\n                                            type: 'email',\r\n                                            message: \"Please enter a valid email\",\r\n                                        }]}\r\n                                    >\r\n                                        <Input allowClear prefix={<MailOutlined />} placeholder=\"Enter a new email\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please input your password!',\r\n                                            },\r\n                                        ]}\r\n                                        hasFeedback\r\n                                    >\r\n                                        <Input.Password allowClear prefix={<LockOutlined />} placeholder=\"Enter a new password\" />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name=\"confirm\"\r\n                                        dependencies={['password']}\r\n                                        hasFeedback\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please confirm your password!',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                                validator(rule, value) {\r\n                                                    if (!value || getFieldValue('password') === value) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject('Oops, the 2 passwords do not match');\r\n                                                },\r\n                                            }),\r\n                                        ]}\r\n                                    >\r\n                                        <Input.Password allowClear prefix={<LockOutlined />} placeholder=\"Confirm new password\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ marginBottom: \"1.5vh\" }}>Register</Button>\r\n\r\n                                        <p>Already have an account? <a href=\"#\" onClick={() => { this.setState({ login: true, register: false }) }}>Login Here!</a></p>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\userChallengeCreate.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesCategory.js",["98"],"import React from 'react';\r\nimport { Layout, Card, List, message, Modal, Tag, Input, Button, Tabs, Avatar, Form, notification, Tooltip } from 'antd';\r\nimport {\r\n  LoadingOutlined,\r\n  UnlockOutlined,\r\n  ProfileOutlined,\r\n  FlagOutlined,\r\n  SmileOutlined,\r\n  FileUnknownTwoTone,\r\n  EyeInvisibleOutlined,\r\n  ExclamationCircleOutlined,\r\n  SolutionOutlined\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport JsxParser from 'react-jsx-parser';\r\nimport { orderBy } from 'lodash';\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { Meta } = Card;\r\nconst { TabPane } = Tabs;\r\nconst { confirm } = Modal;\r\n\r\nconst SubmitFlagForm = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"submit-flag\"\r\n      className=\"submit-flag-form\"\r\n      onFinish={(values) => { props.submitFlag(values); form.resetFields() }}\r\n      style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", marginTop: \"2vh\" }}\r\n    >\r\n      <Form.Item\r\n        name=\"flag\"\r\n        rules={[{ required: true, message: 'Hint: Flags are not blank.' }]}>\r\n        <Input disabled={props.currentChallengeSolved} style={{ width: \"45ch\" }} placeholder={props.currentChallengeStatus} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button disabled={props.currentChallengeSolved} type=\"primary\" htmlType=\"submit\" icon={<FlagOutlined />}>Submit</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\n\r\nclass ChallengesCategory extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      challenges: [],\r\n      challengeModal: false,\r\n      currentChallenge: \"\",\r\n      currentChallengeStatus: \"\",\r\n      viewingChallengeDetails: {\r\n        name: \"\",\r\n        category: this.props.category,\r\n        description: \"\",\r\n        points: 0,\r\n        author: \"\",\r\n        created: \"\",\r\n        solves: [],\r\n        max_attempts: 0,\r\n        tags: [],\r\n        hints: [],\r\n      },\r\n      challengeTags: [],\r\n      loadingChallenge: false,\r\n      currentChallengeSolved: false,\r\n      challengeHints: [],\r\n      attemptsLeft: \"\",\r\n      hintContent: \"\",\r\n      hintModal: false,\r\n      currentSorting: \"points\",\r\n      loadingCat: false,\r\n      challengeWriteup: \"\"\r\n\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const startup = async () => {\r\n      await this.fetchCategories()\r\n    }\r\n\r\n    startup()\r\n  }\r\n\r\n  fetchCategories() {\r\n    let challenges = this.props.currentCategoryChallenges\r\n    challenges = orderBy(challenges, [\"points\"], [\"asc\"])\r\n    this.setState({ challenges: challenges, loadingCat: false })\r\n  }\r\n\r\n  handleBuyHint(close, id, chall) {\r\n    fetch(window.ipAddress + \"/v1/challenge/hint\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"id\": parseInt(id),\r\n        \"chall\": chall,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        message.success({ content: \"Purchashed hint \" + String(id + 1) + \" successfully!\" })\r\n        let challengeHints = this.state.challengeHints\r\n        challengeHints[id] = (\r\n          <Button type=\"primary\" key={\"hint\" + String(id)} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(id, chall, true) }}>Hint {id + 1} - Purchased</Button>\r\n        )\r\n        this.setState({ hintModal: true, hintContent: data.hint, challengeHints: challengeHints })\r\n        close()\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n      close()\r\n    })\r\n  }\r\n\r\n  handleHint(id, chall, bought) {\r\n    if (bought === false) {\r\n      confirm({\r\n        title: 'Are you sure you want to purchase hint ' + parseInt(id + 1) + ' for \"' + chall + '\"?',\r\n        icon: <ExclamationCircleOutlined />,\r\n        onOk: (close) => { this.handleBuyHint(close.bind(this), id, chall) },\r\n        onCancel: () => { },\r\n      });\r\n    }\r\n    else {\r\n      fetch(window.ipAddress + \"/v1/challenge/hint\", {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n        body: JSON.stringify({\r\n          \"id\": parseInt(id),\r\n          \"chall\": chall,\r\n        })\r\n      }).then((results) => {\r\n        return results.json(); //return data in JSON (since its JSON data)\r\n      }).then((data) => {\r\n        //console.log(data)\r\n        if (data.success === true) {\r\n          this.setState({ hintModal: true, hintContent: data.hint })\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n        message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n      })\r\n    }\r\n  }\r\n\r\n  loadChallengeDetails(name, solved) {\r\n    this.setState({ currentChallenge: name, loadingChallenge: true, currentChallengeSolved: solved })\r\n    if (solved === true) {\r\n      this.setState({ currentChallengeStatus: \"Challenge already solved.\" })\r\n    }\r\n    else {\r\n      this.setState({ currentChallengeStatus: \"Enter the flag (case-sensitive)\" })\r\n    }\r\n    document.getElementById(name).style.pointerEvents = \"none\"\r\n    fetch(window.ipAddress + \"/v1/challenge/show/\" + encodeURIComponent(name), {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n\r\n      if (data.success === true) {\r\n\r\n        //Replace <code> with syntax highlighter\r\n        let description = data.chall.description\r\n        let position = description.search(\"<code>\")\r\n\r\n        if (position !== -1) {\r\n          let language = \"\"\r\n          let offset = 0\r\n          position += 6\r\n\r\n          while (true) {\r\n            let currentLetter = description.slice(position + offset, position + offset + 1)\r\n            if (currentLetter === \"\\n\") {\r\n              language = description.slice(position, position + offset)\r\n              description = description.slice(0, position) + description.slice(position + offset)\r\n              description = description.replace(\"<code>\", \"<SyntaxHighlighter language='\" + language + \"' style={atomDark}>{`\")\r\n              description = description.replace(\"</code>\", \"`}</SyntaxHighlighter>\")\r\n              data.chall.description = description\r\n              break\r\n            }\r\n            else if (offset > 10) {\r\n              break\r\n            }\r\n            offset += 1\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n        //Handle unlimited attempts\r\n        if (data.chall.max_attempts === 0) {\r\n          data.chall.max_attempts = \"Unlimited\"\r\n\r\n        }\r\n        else {\r\n          data.chall.max_attempts = String(data.chall.max_attempts - data.chall.used_attempts) + \"/\" + String(data.chall.max_attempts)\r\n        }\r\n\r\n        //Render tags\r\n        if (typeof data.chall.tags !== \"undefined\") {\r\n          const tag = data.chall.tags\r\n          var renderTags = []\r\n\r\n          for (let x = 0; x < tag.length; x++) {\r\n            renderTags.push(\r\n              <Tag color=\"#1765ad\" key={tag[x]}>\r\n                {tag[x]}\r\n              </Tag>\r\n            )\r\n          }\r\n        }\r\n\r\n        //Render writeup link\r\n        let writeupLink = \"\"\r\n        if (typeof data.chall.writeup !== \"undefined\") {\r\n          writeupLink = data.chall.writeup\r\n        }\r\n        else writeupLink = \"\"\r\n\r\n\r\n        //Handle hints\r\n        if (typeof data.chall.hints !== \"undefined\") {\r\n          const hints = data.chall.hints\r\n          var renderHints = []\r\n\r\n          for (let y = 0; y < hints.length; y++) {\r\n            if (hints[y].bought === false) {\r\n              if (hints[y].cost === 0) {\r\n                hints[y].cost = \"Free\"\r\n              }\r\n              else {\r\n                hints[y].cost = String(hints[y].cost) + \" Points\"\r\n              }\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\" }} onClick={() => { this.handleHint(y, name, false) }}>Hint {y + 1} - {hints[y].cost}</Button>\r\n              )\r\n            }\r\n            else {\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(y, name, true) }}>Hint {y + 1} - Purchased</Button>\r\n              )\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n\r\n        this.setState({ viewingChallengeDetails: data.chall, challengeModal: true, challengeTags: renderTags, challengeWriteup: writeupLink, loadingChallenge: false, challengeHints: renderHints })\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n      document.getElementById(name).style.pointerEvents = \"auto\"\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  submitFlag(values) {\r\n\r\n    fetch(window.ipAddress + \"/v1/challenge/submit\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"flag\": values.flag,\r\n        \"chall\": this.state.currentChallenge,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        if (data.data === \"correct\") {\r\n          notification[\"success\"]({\r\n            message: 'Challenge Solved! Congratulations!',\r\n            description:\r\n              'Congratulations for solving \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n          const refresh = async () => {\r\n            await this.props.handleRefresh(false)\r\n            await this.fetchCategories()\r\n            await this.setState({ challengeModal: false })\r\n          }\r\n          refresh()\r\n\r\n        }\r\n        else {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Incorrect Flag',\r\n            description:\r\n              'It seems like you submitted an incorrect flag \"' + values.flag + '\" for \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        if (data.error === \"exceeded\") {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Attempts Exhausted',\r\n            description:\r\n              'It seems like you have execeeded the maximum number of attempts for \"' + this.state.currentChallenge + '\". Contact an admin if you need more tries',\r\n            duration: 0\r\n          });\r\n        }\r\n        else {\r\n          message.error({ content: \"Oops. Unknown error\" })\r\n        }\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n    })\r\n  }\r\n\r\n  sortCats(value) {\r\n    if (value !== this.state.currentSorting) {\r\n      let challenges = this.state.challenges\r\n      if (value === \"points\") {\r\n        challenges = orderBy(challenges, [\"points\"], [\"asc\"])\r\n      }\r\n      else if (value === \"abc\") {\r\n        challenges = orderBy(challenges, [\"name\"], [\"asc\"])\r\n      }\r\n      else if (value === \"abcrev\") {\r\n        challenges = orderBy(challenges, [\"name\"], [\"desc\"])\r\n      }\r\n      this.setState({ challenges: challenges, currentSorting: value })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout className=\"pageTransition\" style={{ height: \"100%\", width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n\r\n        <Modal\r\n          title=\"Hint\"\r\n          visible={this.state.hintModal}\r\n          onCancel={() => { this.setState({ hintModal: false }) }}\r\n          footer={null}\r\n        >\r\n          <p>{this.state.hintContent}</p>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          title={null}\r\n          visible={this.state.challengeModal}\r\n          footer={null}\r\n          bodyStyle={{ textAlign: \"center\" }}\r\n          onCancel={() => { this.setState({ challengeModal: false }) }}\r\n        >\r\n          <Tabs defaultActiveKey=\"challenge\">\r\n            <TabPane\r\n              tab={<span><ProfileOutlined /> Challenge</span>}\r\n              key=\"challenge\"\r\n            >\r\n              {this.state.challengeWriteup !== \"\" && (\r\n                <Tooltip title=\"View writeups for this challenge\">\r\n                  <Button shape=\"circle\" size=\"large\" style={{ position: \"absolute\", right: \"2ch\" }} type=\"primary\" icon={<SolutionOutlined />} onClick={() => { window.open(this.state.challengeWriteup) }} />\r\n                </Tooltip>\r\n              )}\r\n              {this.state.challengeWriteup === \"\" && (\r\n                <Tooltip title=\"Writeups are not available for this challenge\">\r\n                  <Button disabled shape=\"circle\" size=\"large\" style={{ position: \"absolute\", right: \"2ch\" }} type=\"primary\" icon={<SolutionOutlined />} />\r\n                </Tooltip>\r\n              )}\r\n              <h1 style={{ fontSize: \"150%\" }}>{this.state.viewingChallengeDetails.name}</h1>\r\n              <div>\r\n                {this.state.challengeTags}\r\n              </div>\r\n              <h2 style={{ color: \"#1765ad\", marginTop: \"2vh\", marginBottom: \"2vh\", fontSize: \"200%\" }}>{this.state.viewingChallengeDetails.points}</h2>\r\n              <JsxParser\r\n                bindings={{\r\n                  atomDark: atomDark\r\n                }}\r\n                components={{ SyntaxHighlighter }}\r\n                jsx={this.state.viewingChallengeDetails.description}\r\n              />\r\n\r\n\r\n              <div style={{ marginTop: \"2vh\", display: \"flex\", flexDirection: \"column\" }}>\r\n                {this.state.challengeHints}\r\n              </div>\r\n\r\n\r\n              <div style={{ display: \"flex\" }}>\r\n                <SubmitFlagForm submitFlag={this.submitFlag.bind(this)} currentChallengeStatus={this.state.currentChallengeStatus} currentChallengeSolved={this.state.currentChallengeSolved}></SubmitFlagForm>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: \"-1vh\" }}>\r\n                <p>Challenge Author: <em>{this.state.viewingChallengeDetails.author}</em></p>\r\n                <p style={{ color: \"#d87a16\", fontWeight: 500 }}>Attempts Remaining: {this.state.viewingChallengeDetails.max_attempts}</p>\r\n              </div>\r\n            </TabPane>\r\n            <TabPane\r\n              tab={<span><UnlockOutlined /> Solves ({this.state.viewingChallengeDetails.solves.length}) </span>}\r\n              key=\"solves\"\r\n            >\r\n              <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={this.state.viewingChallengeDetails.solves}\r\n                locale={{\r\n                  emptyText: (\r\n                    <div>\r\n                      <SmileOutlined style={{ fontSize: \"500%\" }} />\r\n                      <br />\r\n                      <br />\r\n                      <p style={{ fontSize: \"150%\" }}>No solves yet. Maybe you can be the first!</p>\r\n                    </div>\r\n                  )\r\n                }}\r\n                renderItem={item => {\r\n                    return (\r\n                      <List.Item key={item}>\r\n                        <List.Item.Meta\r\n                          avatar={<Avatar src=\"https://www.todayifoundout.com/wp-content/uploads/2017/11/rick-astley.png\" />}\r\n                          title={<Link to={\"/Profile/\" + item}><a style={{ fontSize: \"110%\", fontWeight: 700 }} onClick={() => { this.setState({ challengeModal: false }) }}>{item}</a></Link>}\r\n                        />\r\n                      </List.Item>\r\n                    )\r\n                }} />\r\n            </TabPane>\r\n          </Tabs>\r\n\r\n\r\n        </Modal>\r\n\r\n        {!this.state.loadingCat && (\r\n          <List\r\n            grid={{\r\n              xs: 1,\r\n              sm: 2,\r\n              md: 2,\r\n              lg: 3,\r\n              xl: 4,\r\n              xxl: 5,\r\n              gutter: 20\r\n            }}\r\n            dataSource={this.state.challenges}\r\n            locale={{\r\n              emptyText: (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                  <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                  <h1 style={{ fontSize: \"200%\" }}>Oops, no challenges have been created.</h1>\r\n                </div>\r\n              )\r\n            }}\r\n            renderItem={item => {\r\n              if (!(\"firstBlood\" in item)) {\r\n                item.firstBlood = \"No Solves Yet!\"\r\n              }\r\n\r\n\r\n              if (!item.solved) {\r\n                return (\r\n                  <List.Item key={item.name}>\r\n                    <div id={item.name} onClick={() => { this.loadChallengeDetails(item.name, item.solved, item.firstBlood) }}>\r\n                      <Card\r\n                        hoverable\r\n                        type=\"inner\"\r\n                        bordered={true}\r\n                        bodyStyle={{ backgroundColor: \"#262626\" }}\r\n                        className=\"card-design\"\r\n                        style={{ overflow: \"hidden\" }}\r\n                      >\r\n                        <Meta\r\n                          description={\r\n                            <div style={{ display: \"flex\", justifyItems: \"center\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\" }}>\r\n                              <h1 style={{ textOverflow: \"ellipsis\", width: \"13vw\", fontSize: \"2.3ch\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}>{item.name}</h1>\r\n                              <h1 style={{ fontSize: \"185%\", color: \"#1765ad\", fontWeight: 700 }}>{item.points}</h1>\r\n                              <h1 style={{ color: \"#d32029\" }}><svg t=\"1591275807515\" className=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2225\" width=\"16\" height=\"16\"><path d=\"M512 0C430.3872 123.8016 153.6 458.4448 153.6 656.384 153.6 859.4432 314.0608 1024 512 1024S870.4 859.4432 870.4 656.384C870.4 458.4448 593.6128 123.8016 512 0zM224.3584 656.384c0-22.4256 17.2032-40.448 38.4-40.448s38.4 18.0224 38.4 40.448c0 59.392 23.4496 113.0496 61.3376 151.8592 38.0928 39.1168 90.9312 63.2832 149.504 63.2832 21.1968 0 38.4 18.1248 38.4 40.448A39.424 39.424 0 0 1 512 952.32a282.624 282.624 0 0 1-202.9568-86.4256A299.52 299.52 0 0 1 224.3584 656.384z\" p-id=\"2226\" fill=\"#d81e06\"></path></svg> {item.firstBlood}</h1>\r\n                              {this.state.loadingChallenge && this.state.currentChallenge === item.name && (\r\n                                <div style={{ width: \"100%\", height: \"100%\", backgroundColor: \"red\", zIndex: 1 }}>\r\n                                  <LoadingOutlined style={{ color: \"#177ddc\", fontSize: \"500%\", position: \"absolute\", zIndex: 1, left: \"40%\", top: \"30%\" }} />\r\n                                </div>\r\n                              )}\r\n                              {item.visibility === false && (\r\n                                <h1 style={{ color: \"#d9d9d9\" }}>Hidden Challenge <EyeInvisibleOutlined /></h1>\r\n                              )}\r\n                            </div>\r\n\r\n\r\n                          }\r\n                        />\r\n                      </Card> {/*Pass entire datasource as prop*/}\r\n                    </div>\r\n                  </List.Item>\r\n                )\r\n              }\r\n              else {\r\n                return (\r\n                  <List.Item key={item.name}>\r\n                    <div id={item.name} onClick={() => { this.loadChallengeDetails(item.name, item.solved) }}>\r\n                      <Card\r\n                        hoverable\r\n                        type=\"inner\"\r\n                        bordered={true}\r\n                        bodyStyle={{ backgroundColor: \"#3c8618\" }}\r\n                        className=\"card-design\"\r\n                        style={{ overflow: \"hidden\" }}\r\n                      >\r\n                        <Meta\r\n                          description={\r\n                            <div style={{ display: \"flex\", justifyItems: \"center\", flexDirection: \"column\", textAlign: \"center\", alignItems: \"center\" }}>\r\n                              <h1 style={{ textOverflow: \"ellipsis\", width: \"13vw\", fontSize: \"2.3ch\", overflow: \"hidden\", whiteSpace: \"nowrap\" }}>{item.name}</h1>\r\n                              <h1 style={{ fontSize: \"185%\", color: \"#1765ad\", fontWeight: 700 }}>{item.points}</h1>\r\n                              <h1 style={{ color: \"#d32029\" }}><svg t=\"1591275807515\" className=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2225\" width=\"16\" height=\"16\"><path d=\"M512 0C430.3872 123.8016 153.6 458.4448 153.6 656.384 153.6 859.4432 314.0608 1024 512 1024S870.4 859.4432 870.4 656.384C870.4 458.4448 593.6128 123.8016 512 0zM224.3584 656.384c0-22.4256 17.2032-40.448 38.4-40.448s38.4 18.0224 38.4 40.448c0 59.392 23.4496 113.0496 61.3376 151.8592 38.0928 39.1168 90.9312 63.2832 149.504 63.2832 21.1968 0 38.4 18.1248 38.4 40.448A39.424 39.424 0 0 1 512 952.32a282.624 282.624 0 0 1-202.9568-86.4256A299.52 299.52 0 0 1 224.3584 656.384z\" p-id=\"2226\" fill=\"#d81e06\"></path></svg> {item.firstBlood}</h1>\r\n                              {this.state.loadingChallenge && this.state.currentChallenge === item.name && (\r\n                                <div style={{ width: \"100%\", height: \"100%\", backgroundColor: \"red\", zIndex: 1 }}>\r\n                                  <LoadingOutlined style={{ color: \"#177ddc\", fontSize: \"500%\", position: \"absolute\", zIndex: 1, left: \"40%\", top: \"30%\" }} />\r\n                                </div>\r\n                              )}\r\n                              {item.visibility === false && (\r\n                                <h1 style={{ color: \"#d9d9d9\" }}>Hidden Challenge <EyeInvisibleOutlined /></h1>\r\n                              )}\r\n                            </div>\r\n\r\n\r\n                          }\r\n                        />\r\n                      </Card> {/*Pass entire datasource as prop*/}\r\n                    </div>\r\n                  </List.Item>\r\n                )\r\n              }\r\n            }\r\n            }\r\n          />\r\n        )}\r\n\r\n        {this.state.loadingCat && (\r\n          <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\r\n            <Ellipsis color=\"#177ddc\" size={110}></Ellipsis>\r\n          </div>\r\n        )}\r\n\r\n      </Layout>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChallengesCategory;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSort.js",["99","100","101"],"import React from 'react';\r\nimport { Layout, List, message, Modal, Tag, Input, Button, Tabs, Avatar, Form, notification, Tooltip } from 'antd';\r\nimport {\r\n  UnlockOutlined,\r\n  ProfileOutlined,\r\n  FlagOutlined,\r\n  SmileOutlined,\r\n  ExclamationCircleOutlined,\r\n  SolutionOutlined\r\n} from '@ant-design/icons';\r\nimport './App.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport JsxParser from 'react-jsx-parser';\r\nimport { Link } from 'react-router-dom';\r\nimport ChallengesTagSortList from './challengesTagSortList.js';\r\nimport { orderBy } from 'lodash';\r\n\r\n\r\nconst { TabPane } = Tabs;\r\nconst { confirm } = Modal;\r\n\r\nconst SubmitFlagForm = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"submit-flag\"\r\n      className=\"submit-flag-form\"\r\n      onFinish={(values) => { props.submitFlag(values); form.resetFields() }}\r\n      style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", marginTop: \"2vh\" }}\r\n    >\r\n      <Form.Item\r\n        name=\"flag\"\r\n        rules={[{ required: true, message: 'Hint: Flags are not blank.' }]}>\r\n        <Input disabled={props.currentChallengeSolved} style={{ width: \"45ch\" }} placeholder={props.currentChallengeStatus} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button disabled={props.currentChallengeSolved} type=\"primary\" htmlType=\"submit\" icon={<FlagOutlined />}>Submit</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\n\r\nclass ChallengesTagSort extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      challenges: [],\r\n      challengeModal: false,\r\n      currentChallenge: \"\",\r\n      currentChallengeStatus: \"\",\r\n      viewingChallengeDetails: {\r\n        name: \"\",\r\n        category: this.props.category,\r\n        description: \"\",\r\n        points: 0,\r\n        author: \"\",\r\n        created: \"\",\r\n        solves: [],\r\n        max_attempts: 0,\r\n        tags: [],\r\n        hints: [],\r\n      },\r\n      challengeTags: [],\r\n      loadingChallenge: false,\r\n      currentChallengeSolved: false,\r\n      challengeHints: [],\r\n      attemptsLeft: \"\",\r\n      hintContent: \"\",\r\n      hintModal: false,\r\n      currentSorting: \"points\",\r\n      tag: false,\r\n      loadingTag: false,\r\n      challengeWriteup: \"\"\r\n\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const startup = async () => {\r\n      await this.sortByTags()\r\n    }\r\n\r\n    startup()\r\n  }\r\n\r\n  sortByTags() {\r\n\r\n    let originalData = this.props.tagData\r\n    let tag = {}\r\n    this.setState({ loadingTag: true })\r\n\r\n\r\n    for (const [key, value] of Object.entries(originalData)) {\r\n      let currentCat = originalData[key]\r\n      for (let x = 0; x < currentCat.length; x++) { //loop through each challenge\r\n\r\n        if (\"tags\" in currentCat[x]) {\r\n          const firstTag = currentCat[x].tags[0]\r\n          if (firstTag.toLowerCase() in tag) {\r\n            tag[firstTag.toLowerCase()].push(currentCat[x]) //add current challenge to that tag's category\r\n          }\r\n          else {\r\n            tag[firstTag.toLowerCase()] = []\r\n            tag[firstTag.toLowerCase()].push(currentCat[x])\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(tag)) {\r\n      tag[key] = orderBy(tag[key], ['points'], ['asc'])\r\n\r\n    }\r\n    console.log(tag)\r\n    this.setState({ tag: tag, loadingTag: false })\r\n\r\n  }\r\n\r\n  handleBuyHint(close, id, chall) {\r\n    fetch(window.ipAddress + \"/v1/challenge/hint\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"id\": parseInt(id),\r\n        \"chall\": chall,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        message.success({ content: \"Purchashed hint \" + String(id + 1) + \" successfully!\" })\r\n        let challengeHints = this.state.challengeHints\r\n        challengeHints[id] = (\r\n          <Button type=\"primary\" key={\"hint\" + String(id)} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(id, chall, true) }}>Hint {id + 1} - Purchased</Button>\r\n        )\r\n        this.setState({ hintModal: true, hintContent: data.hint, challengeHints: challengeHints })\r\n        close()\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n      close()\r\n    })\r\n  }\r\n\r\n  handleHint(id, chall, bought) {\r\n\r\n    if (bought === false) {\r\n      confirm({\r\n        title: 'Are you sure you want to purchase hint ' + parseInt(id + 1) + ' for \"' + chall + '\"?',\r\n        icon: <ExclamationCircleOutlined />,\r\n        onOk: (close) => { this.handleBuyHint(close.bind(this), id, chall) },\r\n        onCancel() { },\r\n      });\r\n    }\r\n    else {\r\n      fetch(window.ipAddress + \"/v1/challenge/hint\", {\r\n        method: 'post',\r\n        headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n        body: JSON.stringify({\r\n          \"id\": parseInt(id),\r\n          \"chall\": chall,\r\n        })\r\n      }).then((results) => {\r\n        return results.json(); //return data in JSON (since its JSON data)\r\n      }).then((data) => {\r\n        //console.log(data)\r\n        if (data.success === true) {\r\n          this.setState({ hintModal: true, hintContent: data.hint })\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n        message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  loadChallengeDetails = async (name, solved) => {\r\n    await this.setState({ currentChallenge: name, loadingChallenge: true, currentChallengeSolved: solved, tagList: this.state.tagLists })\r\n    if (solved === true) {\r\n      this.setState({ currentChallengeStatus: \"Challenge already solved.\" })\r\n    }\r\n    else {\r\n      this.setState({ currentChallengeStatus: \"Enter the flag (case-sensitive)\" })\r\n    }\r\n    //document.getElementById(name).style.pointerEvents = \"none\"\r\n    fetch(window.ipAddress + \"/v1/challenge/show/\" + encodeURIComponent(name), {\r\n      method: 'get',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      console.log(data)\r\n      if (data.success === true) {\r\n\r\n        //Replace <code> with syntax highlighter\r\n        let description = data.chall.description\r\n        let position = description.search(\"<code>\")\r\n\r\n        if (position !== -1) {\r\n          let language = \"\"\r\n          let offset = 0\r\n          position += 6\r\n\r\n          while (true) {\r\n            let currentLetter = description.slice(position + offset, position + offset + 1)\r\n            if (currentLetter === \"\\n\") {\r\n              language = description.slice(position, position + offset)\r\n              description = description.slice(0, position) + description.slice(position + offset)\r\n              description = description.replace(\"<code>\", \"<SyntaxHighlighter language='\" + language + \"' style={atomDark}>{`\")\r\n              description = description.replace(\"</code>\", \"`}</SyntaxHighlighter>\")\r\n              data.chall.description = description\r\n              break\r\n            }\r\n            else if (offset > 10) {\r\n              break\r\n            }\r\n            offset += 1\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n        //Handle unlimited attempts\r\n        if (data.chall.max_attempts === 0) {\r\n          data.chall.max_attempts = \"Unlimited\"\r\n\r\n        }\r\n        else {\r\n          data.chall.max_attempts = String(data.chall.max_attempts - data.chall.used_attempts) + \"/\" + String(data.chall.max_attempts)\r\n        }\r\n\r\n        //Render tags\r\n        if (typeof data.chall.tags !== \"undefined\") {\r\n          const tag = data.chall.tags\r\n          var renderTags = []\r\n\r\n          for (let x = 0; x < tag.length; x++) {\r\n            renderTags.push(\r\n              <Tag color=\"#1765ad\" key={tag[x]}>\r\n                {tag[x]}\r\n              </Tag>\r\n            )\r\n          }\r\n        }\r\n\r\n        //Render writeup link\r\n        let writeupLink = \"\"\r\n        if (typeof data.chall.writeup !== \"undefined\") {\r\n          writeupLink = data.chall.writeup\r\n        }\r\n        else writeupLink = \"\"\r\n\r\n\r\n        //Handle hints\r\n        if (typeof data.chall.hints !== \"undefined\") {\r\n          const hints = data.chall.hints\r\n          var renderHints = []\r\n\r\n          for (let y = 0; y < hints.length; y++) {\r\n            if (hints[y].bought === false) {\r\n              if (hints[y].cost === 0) {\r\n                hints[y].cost = \"Free\"\r\n              }\r\n              else {\r\n                hints[y].cost = String(hints[y].cost) + \" Points\"\r\n              }\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\" }} onClick={() => { this.handleHint(y, name, false) }}>Hint {y + 1} - {hints[y].cost}</Button>\r\n              )\r\n            }\r\n            else {\r\n              renderHints.push(\r\n                <Button type=\"primary\" key={hints[y].cost} style={{ marginBottom: \"1.5vh\", backgroundColor: \"#49aa19\" }} onClick={() => { this.handleHint(y, name, true) }}>Hint {y + 1} - Purchased</Button>\r\n              )\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n\r\n        this.setState({ viewingChallengeDetails: data.chall, challengeModal: true, challengeTags: renderTags, challengeWriteup: writeupLink, loadingChallenge: false, challengeHints: renderHints })\r\n\r\n      }\r\n      else {\r\n        message.error({ content: \"Oops. Unknown error\" })\r\n      }\r\n      //document.getElementById(name).style.pointerEvents = \"auto\"\r\n\r\n\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n    })\r\n  }\r\n\r\n  submitFlag(values) {\r\n\r\n    fetch(window.ipAddress + \"/v1/challenge/submit\", {\r\n      method: 'post',\r\n      headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n      body: JSON.stringify({\r\n        \"flag\": values.flag,\r\n        \"chall\": this.state.currentChallenge,\r\n      })\r\n    }).then((results) => {\r\n      return results.json(); //return data in JSON (since its JSON data)\r\n    }).then((data) => {\r\n      //console.log(data)\r\n      if (data.success === true) {\r\n        if (data.data === \"correct\") {\r\n          notification[\"success\"]({\r\n            message: 'Challenge Solved! Congratulations!',\r\n            description:\r\n              'Congratulations for solving \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n          const refresh = async () => {\r\n            await this.props.handleRefresh(true)\r\n            await this.sortByTags()\r\n\r\n          }\r\n          refresh()\r\n\r\n        }\r\n        else {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Incorrect Flag',\r\n            description:\r\n              'It seems like you submitted an incorrect flag (' + values.flag + ') for \"' + this.state.currentChallenge + '\".',\r\n            duration: 0\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        if (data.error === \"exceeded\") {\r\n          notification[\"error\"]({\r\n            message: 'Oops. Attempts Exhausted',\r\n            description:\r\n              'It seems like you have execeeded the maximum number of attempts for \"' + this.state.currentChallenge + '\". Contact an admin if you need more tries',\r\n            duration: 0\r\n          });\r\n        }\r\n        else {\r\n          message.error({ content: \"Oops. Unknown error\" })\r\n        }\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error)\r\n      message.error({ content: \"Oops. There was an issue connecting to the server\" });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout className=\"pageTransition\" style={{ height: \"100%\", width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n\r\n        <Modal\r\n          title=\"Hint\"\r\n          visible={this.state.hintModal}\r\n          onCancel={() => { this.setState({ hintModal: false }) }}\r\n          footer={null}\r\n        >\r\n          <p>{this.state.hintContent}</p>\r\n        </Modal>\r\n\r\n\r\n        <Modal\r\n          title={null}\r\n          visible={this.state.challengeModal}\r\n          footer={null}\r\n          bodyStyle={{ textAlign: \"center\" }}\r\n          onCancel={() => { this.setState({ challengeModal: false }) }}\r\n        >\r\n          <Tabs defaultActiveKey=\"challenge\">\r\n            <TabPane\r\n              tab={<span><ProfileOutlined /> Challenge</span>}\r\n              key=\"challenge\"\r\n            >\r\n              {this.state.challengeWriteup !== \"\" && (\r\n                <Tooltip title=\"View writeups for this challenge\">\r\n                  <Button shape=\"circle\" size=\"large\" style={{ position: \"absolute\", right: \"2ch\" }} type=\"primary\" icon={<SolutionOutlined />} onClick={() => {window.open(this.state.challengeWriteup)}}/>\r\n                </Tooltip>\r\n              )}\r\n              {this.state.challengeWriteup === \"\" && (\r\n                <Tooltip title=\"Writeups are not available for this challenge\">\r\n                  <Button disabled shape=\"circle\" size=\"large\" style={{ position: \"absolute\", right: \"2ch\" }} type=\"primary\" icon={<SolutionOutlined />} />\r\n                </Tooltip>\r\n              )}\r\n              <h1 style={{ fontSize: \"150%\" }}>{this.state.viewingChallengeDetails.name}</h1>\r\n              <div>\r\n                {this.state.challengeTags}\r\n              </div>\r\n              <h2 style={{ color: \"#1765ad\", marginTop: \"2vh\", marginBottom: \"6vh\", fontSize: \"200%\" }}>{this.state.viewingChallengeDetails.points}</h2>\r\n              <JsxParser\r\n                bindings={{\r\n                  atomDark: atomDark\r\n                }}\r\n                components={{ SyntaxHighlighter }}\r\n                jsx={this.state.viewingChallengeDetails.description}\r\n              />\r\n\r\n\r\n              <div style={{ marginTop: \"6vh\", display: \"flex\", flexDirection: \"column\" }}>\r\n                {this.state.challengeHints}\r\n              </div>\r\n\r\n\r\n              <div style={{ display: \"flex\" }}>\r\n                <SubmitFlagForm submitFlag={this.submitFlag.bind(this)} currentChallengeStatus={this.state.currentChallengeStatus} currentChallengeSolved={this.state.currentChallengeSolved}></SubmitFlagForm>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", marginTop: \"-1vh\" }}>\r\n                <p>Challenge Author: <em>{this.state.viewingChallengeDetails.author}</em></p>\r\n                <p style={{ color: \"#d87a16\", fontWeight: 500 }}>Attempts Remaining: {this.state.viewingChallengeDetails.max_attempts}</p>\r\n              </div>\r\n            </TabPane>\r\n            <TabPane\r\n              tab={<span><UnlockOutlined /> Solves ({this.state.viewingChallengeDetails.solves.length}) </span>}\r\n              key=\"solves\"\r\n            >\r\n              <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={this.state.viewingChallengeDetails.solves}\r\n                locale={{\r\n                  emptyText: (\r\n                    <div>\r\n                      <SmileOutlined style={{ fontSize: \"500%\" }} />\r\n                      <br />\r\n                      <br />\r\n                      <p style={{ fontSize: \"150%\" }}>No solves yet. Maybe you can be the first!</p>\r\n                    </div>\r\n                  )\r\n                }}\r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item}>\r\n                      <List.Item.Meta\r\n                        avatar={<Avatar src=\"https://www.todayifoundout.com/wp-content/uploads/2017/11/rick-astley.png\" />}\r\n                        title={<Link to={\"/Profile/\" + item}><a style={{ fontSize: \"110%\", fontWeight: 700 }} onClick={() => { this.setState({ challengeModal: false }) }}>{item}</a></Link>}\r\n                      />\r\n                    </List.Item>\r\n                  )\r\n                }\r\n                } />\r\n            </TabPane>\r\n          </Tabs>\r\n\r\n\r\n        </Modal>\r\n\r\n        {this.state.tag && (\r\n          <ChallengesTagSortList tag={this.state.tag} loadChallengeDetails={this.loadChallengeDetails.bind(this)} loadingChallenge={this.state.loadingChallenge} currentChallenge={this.state.currentChallenge} />\r\n        )}\r\n      </Layout>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChallengesTagSort;\r\n","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminUsers.js",["102","103","104"],"import React from 'react';\r\nimport { Layout, Menu, Table, message, Dropdown, Button, Select, Modal, Form, Input } from 'antd';\r\nimport {\r\n    FileUnknownTwoTone,\r\n    ExclamationCircleOutlined,\r\n    DeleteOutlined,\r\n    ClusterOutlined,\r\n    UserOutlined,\r\n    MailOutlined\r\n} from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { Ellipsis } from 'react-spinners-css';\r\nimport './App.css';\r\n\r\nconst { Column } = Table;\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\n\r\n\r\nconst RegisterForm = (props) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form\r\n            form={form}\r\n            name=\"register_form\"\r\n            className=\"register-form\"\r\n            onFinish={(values) => { props.createAccount(values); form.resetFields() }}\r\n        >\r\n            <Form.Item\r\n                name=\"username\"\r\n                rules={[{ required: true, message: 'Please enter a username' }]}\r\n            >\r\n                <Input allowClear prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Enter a new username\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                    { required: true, message: 'Please enter an email' },\r\n                    {\r\n                        type: 'email',\r\n                        message: \"Please enter a valid email\",\r\n                    },]}\r\n            >\r\n                <Input allowClear prefix={<MailOutlined />} placeholder=\"Enter a new email\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                ]}\r\n                hasFeedback\r\n            >\r\n                <Input.Password allowClear placeholder=\"Enter a new password\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"confirm\"\r\n                dependencies={['password']}\r\n                hasFeedback\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                        validator(rule, value) {\r\n                            if (!value || getFieldValue('password') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject('Oops, the 2 passwords do not match');\r\n                        },\r\n                    }),\r\n                ]}\r\n            >\r\n                <Input.Password allowClear placeholder=\"Confirm new password\" />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button style={{ marginRight: \"1.5vw\" }} onClick={() => { props.setState({ createUserModal: false }) }}>Cancel</Button>\r\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ marginBottom: \"1.5vh\" }}>Create Account</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\n\r\nclass AdminUsers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            dataSource: [],\r\n            permissionModal: false,\r\n            permissionLevel: 0,\r\n            permissionChangeTo: 0,\r\n            createUserModal: false,\r\n            username: \"\",\r\n            modalLoading: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fillTableData()\r\n    }\r\n\r\n    fillTableData = () => {\r\n        this.setState({ loading: true })\r\n        fetch(window.ipAddress + \"/v1/account/list\", {\r\n            method: 'get',\r\n            headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            if (data.success === true) {\r\n                this.setState({ dataSource: data.list, loading: false })\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n\r\n\r\n        }).catch((error) => {\r\n            message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n        })\r\n    }\r\n\r\n    changePermissions = () => {\r\n        this.setState({ modalLoading: true })\r\n        fetch(window.ipAddress + \"/v1/account/permissions\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n            body: JSON.stringify({\r\n                \"username\": this.state.username,\r\n                \"type\": this.state.permissionChangeTo\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            if (data.success === true) {\r\n                message.success({ content: \"Permissions changed successfully\" })\r\n                this.setState({ modalLoading: false, permissionModal: false })\r\n                this.fillTableData()\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n        })\r\n    }\r\n\r\n\r\n\r\n    deleteAccount = (close, username) => {\r\n        fetch(window.ipAddress + \"/v1/account/delete\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json', \"Authorization\": localStorage.getItem(\"IRSCTF-token\") },\r\n            body: JSON.stringify({\r\n                \"username\": username,\r\n            })\r\n        }).then((results) => {\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n            if (data.success === true) {\r\n                \r\n                message.success({ content: \"User \\\"\" + username + \"\\\" deleted successfully\" })\r\n                this.fillTableData()\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n            close()\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n            close()\r\n        })\r\n\r\n    }\r\n\r\n    createAccount = (values) => {\r\n        this.setState({ modalLoading: true })\r\n        fetch(window.ipAddress + \"/v1/account/create\", {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"username\": values.username,\r\n                \"password\": values.password,\r\n                \"email\": values.email\r\n            })\r\n        }).then((results) => {\r\n            console.log(results)\r\n            return results.json(); //return data in JSON (since its JSON data)\r\n        }).then((data) => {\r\n            //console.log(data)\r\n            if (data.success === true) {\r\n                message.success({ content: \"Created user \" + values.username + \" successfully!\" })\r\n                this.setState({ modalLoading: false, createUserModal: false })\r\n                this.fillTableData()\r\n            }\r\n            else if (data.error === \"email-taken\") {\r\n                message.warn({ content: \"Oops. Email already taken\" })\r\n            }\r\n            else if (data.error === \"username-taken\") {\r\n                message.warn({ content: \"Oops. Username already taken\" })\r\n            }\r\n            else {\r\n                message.error({ content: \"Oops. Unknown error\" })\r\n            }\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            message.error({ content: \"Oops. There was an issue connecting with the server\" });\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Layout style={{ height: \"100%\", width: \"100%\", backgroundColor: \"rgba(0, 0, 0, 0)\" }}>\r\n                {this.state.loading && (\r\n                    <div style={{ position: \"absolute\", left: \"50%\", transform: \"translate(-50%, 0%)\", zIndex: 10 }}>\r\n                        <Ellipsis color=\"#177ddc\" size={120} ></Ellipsis>\r\n                    </div>\r\n                )}\r\n\r\n                {!this.state.loading && (\r\n                    <div>\r\n                        <Modal\r\n                            title={<span>Change User Permissions <ClusterOutlined /></span>}\r\n                            visible={this.state.permissionModal}\r\n                            onOk={this.changePermissions}\r\n                            onCancel={() => { this.setState({ permissionModal: false }) }}\r\n                            confirmLoading={this.state.modalLoading}\r\n                        >\r\n                            <Select size=\"large\" value={this.state.permissionChangeTo} style={{ width: \"30ch\" }} onSelect={(value) => { this.setState({ permissionChangeTo: value }) }}>\r\n                                <Option value=\"0\">0 - Normal User</Option>\r\n                                <Option value=\"1\">1 - Challenge Creator User</Option>\r\n                                <Option value=\"2\">2 - Admin User</Option>\r\n                            </Select>\r\n                            <br />\r\n                            <br />\r\n\r\n                            <ul>\r\n                                <li><b>0 - Normal User</b>: Has access to the basic functions and nothing else</li>\r\n                                <li><b>1 - Challenge Creator User</b>: Has the additional power of submitting new challenges, but not modifying existing ones</li>\r\n                                <li><b>2 - Admin User</b>: Has full access to the platform via the admin panel.</li>\r\n                            </ul>\r\n                        </Modal>\r\n\r\n                        <Modal\r\n                            title=\"Create New Account\"\r\n                            visible={this.state.createUserModal}\r\n                            onOk={this.createAccount}\r\n                            footer={null}\r\n                            onCancel={() => { this.setState({ createUserModal: false }) }}\r\n                            confirmLoading={this.state.modalLoading}\r\n                        >\r\n\r\n                            <RegisterForm createAccount={this.createAccount.bind(this)} setState={this.setState.bind(this)}></RegisterForm>\r\n                        </Modal>\r\n\r\n\r\n\r\n                        <Button type=\"primary\" style={{ marginBottom: \"2vh\", maxWidth: \"25ch\" }} icon={<UserOutlined />} onClick={() => { this.setState({ createUserModal: true }) }}>Create New User</Button>\r\n\r\n                        <Table style={{ overflow: \"auto\" }} dataSource={this.state.dataSource} locale={{\r\n                            emptyText: (\r\n                                <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10vh\" }}>\r\n                                    <FileUnknownTwoTone style={{ color: \"#177ddc\", fontSize: \"400%\", zIndex: 1 }} />\r\n                                    <h1 style={{ fontSize: \"200%\" }}>There are no users created</h1>\r\n                                </div>\r\n                            )\r\n                        }}>\r\n                            <Column title=\"Username\" dataIndex=\"username\" key=\"username\"\r\n                                render={(text, row, index) => {\r\n                                    return <Link to={\"/Profile/\" + text}><a style={{ fontSize: \"110%\", fontWeight: 700 }}>{text}</a></Link>;\r\n                                }}\r\n                            />\r\n                            <Column title=\"Email\" dataIndex=\"email\" key=\"email\" />\r\n                            <Column title=\"Score\" dataIndex=\"score\" key=\"score\" />\r\n                            <Column title=\"Permissions\" dataIndex=\"type\" key=\"type\" />\r\n                            <Column\r\n                                title=\"\"\r\n                                key=\"action\"\r\n                                render={(text, record) => (\r\n                                    <Dropdown trigger={['click']} overlay={\r\n                                        <Menu>\r\n                                            <Menu.Item onClick={() => {\r\n                                                this.setState({ permissionModal: true, username: record.username, permissionChangeTo: record.type.toString() })\r\n                                            }}>\r\n                                                <span>\r\n                                                    Change Permissions <ClusterOutlined />\r\n                                                </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Divider />\r\n                                            <Menu.Item onClick={() => {\r\n                                                confirm({\r\n                                                    title: 'Are you sure you want to delete the user \\\"' + record.username + '\\\"? This action is irreversible.',\r\n                                                    icon: <ExclamationCircleOutlined />,\r\n                                                    onOk: (close) => { this.deleteAccount(close.bind(this), record.username) },\r\n                                                    onCancel: () => { },\r\n                                                });\r\n                                            }}>\r\n                                                <span style={{ color: \"#d32029\" }} >\r\n                                                    Delete Account <DeleteOutlined />\r\n                                                </span>\r\n                                            </Menu.Item>\r\n                                        </Menu>\r\n                                    } placement=\"bottomCenter\">\r\n                                        <Button>Actions</Button>\r\n                                    </Dropdown>\r\n                                )}\r\n                            />\r\n                        </Table>\r\n                    </div>\r\n                )}\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminUsers;","C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminSubmissions.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallenges.js",["105","106"],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeCreate.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\adminChallengeEdit.js",[],"C:\\Users\\Tkaixiang\\Documents\\GitHub\\ctf_platform\\client\\src\\challengesTagSortList.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":197,"column":313,"nodeType":"113","endLine":197,"endColumn":325},{"ruleId":"114","severity":1,"message":"115","line":328,"column":58,"nodeType":"116","endLine":328,"endColumn":107},{"ruleId":"117","severity":1,"message":"118","line":127,"column":29,"nodeType":"116","endLine":127,"endColumn":106},{"ruleId":"114","severity":1,"message":"119","line":161,"column":41,"nodeType":"116","endLine":161,"endColumn":82},{"ruleId":"114","severity":1,"message":"119","line":166,"column":44,"nodeType":"116","endLine":166,"endColumn":125},{"ruleId":"114","severity":1,"message":"119","line":235,"column":69,"nodeType":"116","endLine":235,"endColumn":149},{"ruleId":"114","severity":1,"message":"115","line":437,"column":64,"nodeType":"116","endLine":437,"endColumn":174},{"ruleId":"120","severity":1,"message":"121","line":98,"column":22,"nodeType":"122","messageId":"123","endLine":98,"endColumn":27},{"ruleId":"120","severity":1,"message":"121","line":116,"column":22,"nodeType":"122","messageId":"123","endLine":116,"endColumn":27},{"ruleId":"114","severity":1,"message":"115","line":448,"column":62,"nodeType":"116","endLine":448,"endColumn":172},{"ruleId":"114","severity":1,"message":"115","line":296,"column":74,"nodeType":"116","endLine":296,"endColumn":123},{"ruleId":"124","severity":1,"message":"125","line":318,"column":102,"nodeType":"126","messageId":"127","endLine":318,"endColumn":103,"suggestions":"128"},{"ruleId":"124","severity":1,"message":"125","line":318,"column":127,"nodeType":"126","messageId":"127","endLine":318,"endColumn":128,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"125","line":288,"column":115,"nodeType":"126","messageId":"127","endLine":288,"endColumn":116,"suggestions":"130"},{"ruleId":"124","severity":1,"message":"125","line":288,"column":136,"nodeType":"126","messageId":"127","endLine":288,"endColumn":137,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["134","135"],["136","137"],["138","139"],["140","141"],"no-global-assign","no-unsafe-negation",{"messageId":"142","fix":"143","desc":"144"},{"messageId":"145","fix":"146","desc":"147"},{"messageId":"142","fix":"148","desc":"144"},{"messageId":"145","fix":"149","desc":"147"},{"messageId":"142","fix":"150","desc":"144"},{"messageId":"145","fix":"151","desc":"147"},{"messageId":"142","fix":"152","desc":"144"},{"messageId":"145","fix":"153","desc":"147"},"removeEscape",{"range":"154","text":"155"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"156","text":"157"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"158","text":"155"},{"range":"159","text":"157"},{"range":"160","text":"155"},{"range":"161","text":"157"},{"range":"162","text":"155"},{"range":"163","text":"157"},[13465,13466],"",[13465,13465],"\\",[13490,13491],[13490,13490],[11053,11054],[11053,11053],[11074,11075],[11074,11074]]